{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1️⃣ [Week3/심화] Multi-genre natural language inference(MNLI)\n",
    "\n",
    "MNLI는 두 문장이 주어졌을 때 논리적으로 연결이 되어 있는지, 서로 모순되는지, 아니면 아예 무관한지 분류하는 문제입니다.\n",
    "\n",
    "* data : https://www.kaggle.com/datasets/thedevastator/unlocking-language-understanding-with-the-multin"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "** train **\n",
      "train len : 392702\n",
      "Index(['promptID', 'pairID', 'premise', 'premise_binary_parse',\n",
      "       'premise_parse', 'hypothesis', 'hypothesis_binary_parse',\n",
      "       'hypothesis_parse', 'genre', 'label'],\n",
      "      dtype='object')\n",
      "** test **\n",
      "test len : 9815\n"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import pandas as pd\n",
    "\n",
    "train_df = pd.read_csv('./train.csv', on_bad_lines=\"skip\")\n",
    "test_df = pd.read_csv('./validation_matched.csv', on_bad_lines=\"skip\")\n",
    "\n",
    "print(\"** train **\")\n",
    "print(f\"train len : {len(train_df)}\")\n",
    "print(train_df.columns)\n",
    "print(\"** test **\")\n",
    "print(f\"test len : {len(test_df)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 📋 MNLI 데이터셋 칼럼 설명\n",
    "|칼럼 이름|설명|\n",
    "|--|--|\n",
    "|promptID\t|원본 문서나 문단 단위의 ID. |\n",
    "|pairID|\t각 문장 쌍의 고유 식별자.|\n",
    "|premise\t|전제 문장.|\n",
    "|premise_binary_parse\t|전제 문장의 binary constituency 구문 트리 (문법 구조 파싱 결과, 괄호로 표현됨).|\n",
    "|premise_parse\t|전제 문장의 full constituency 구문 트리. |\n",
    "|hypothesis\t|가설 문장. premise를 기반으로 이 문장이 참인지 아닌지를 판단|\n",
    "|hypothesis_binary_parse|\t가설 문장의 binary 구문 트리.|\n",
    "|hypothesis_parse\t|가설 문장의 full constituency 구문 트리.|\n",
    "|genre\t|문장 쌍이 나온 도메인/장르 (예: fiction, slate, telephone, travel, government 등). 모델이 도메인 일반화 능력을 가질 수 있게 도와주는 요소.|\n",
    "|label|\t정답 레이블. entailment, contradiction, neutral, 또는 - (레이블 없음: 예측 대상일 때 사용).|\n",
    "\n",
    "결굴 premise와 hypothesis의 관계를 pred 해야하는 것이고 정답은 label에 있으므로 이 3개 column을 사용하면 된다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 데이터 확인 및 전처리\n",
    "\n",
    "* 결측치 확인\n",
    "* train 데이터 분포 확인 (불균형한지)\n",
    "* label의 의미 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>premise</th>\n",
       "      <th>hypothesis</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Conceptually cream skimming has two basic dime...</td>\n",
       "      <td>Product and geography are what make cream skim...</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>you know during the season and i guess at at y...</td>\n",
       "      <td>You lose the things to the following level if ...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>One of our number will carry out your instruct...</td>\n",
       "      <td>A member of my team will execute your orders w...</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>How do you know? All this is their information...</td>\n",
       "      <td>This information belongs to them.</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>yeah i tell you what though if you go price so...</td>\n",
       "      <td>The tennis shoes have a range of prices.</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             premise  \\\n",
       "0  Conceptually cream skimming has two basic dime...   \n",
       "1  you know during the season and i guess at at y...   \n",
       "2  One of our number will carry out your instruct...   \n",
       "3  How do you know? All this is their information...   \n",
       "4  yeah i tell you what though if you go price so...   \n",
       "\n",
       "                                          hypothesis  label  \n",
       "0  Product and geography are what make cream skim...      1  \n",
       "1  You lose the things to the following level if ...      0  \n",
       "2  A member of my team will execute your orders w...      0  \n",
       "3                  This information belongs to them.      0  \n",
       "4           The tennis shoes have a range of prices.      1  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df = train_df[['premise','hypothesis','label']]\n",
    "test_df = test_df[['premise','hypothesis','label']]\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "** train **\n",
      "premise        0\n",
      "hypothesis    40\n",
      "label          0\n",
      "dtype: int64\n",
      "** test **\n",
      "premise       0\n",
      "hypothesis    0\n",
      "label         0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "print(\"** train **\")\n",
    "print(train_df.isnull().sum())\n",
    "print(\"** test **\")\n",
    "print(test_df.isnull().sum())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40 rows dropped.\n"
     ]
    }
   ],
   "source": [
    "## 결측치 제거\n",
    "before_len = len(train_df)\n",
    "train_df = train_df.dropna()\n",
    "after_len = len(train_df)\n",
    "\n",
    "print(f\"{before_len - after_len} rows dropped.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 2])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df['label'].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "train data가 불균형한지도 확인해준다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "label\n",
       "2    130889\n",
       "1    130887\n",
       "0    130886\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df['label'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Label 1 예시:\n",
      "- Premise: money that you can touch but it's tax deferred and yields a higher rate in general than what we can get in CD's and gets life it's a it's a term life policy also\n",
      "  Hypothesis: It's tax deferred, so you can touch it, but it yields a higher rate in general and looks better on your tax report.\n",
      "- Premise: The scenic coastal circuit begins (and ends) in Manfredonia, with historical attractions such as the 12th-century church of Santa Maria di Siponto (southwest of town), but tourism here is generally of the sun-and-sea kind, as it is one of Italy's most attractive natural regions.\n",
      "  Hypothesis: The church gets thousands of dollars each month in money from tourism.\n",
      "- Premise: He made major contributions to the development of the International Organization of Supreme Audit Institutions (INTOSAI), which includes 179 countries, and he also created an international fellows program at GAO to provide support, training, and guidance to a cadre of key individuals from accountability organizations worldwide.\n",
      "  Hypothesis: He made big contributions to the INTOSAI so he valued its' success a great deal.\n",
      "\n",
      "Label 0 예시:\n",
      "- Premise: mine doesn't  i know what you're saying\n",
      "  Hypothesis: I know what you are talking about.\n",
      "- Premise: In the confusion I slipped away, offering silent thanks to Gods and lizards alike.\n",
      "  Hypothesis: I was thankful as I slipped away. \n",
      "- Premise: Finally, the orchestra of trained zoo employees managed to clear the atmosphere full of feelings of disgust caused the pathology of living in a big city.\n",
      "  Hypothesis: The atmosphere was eventually cleared by the zoo employees.\n",
      "\n",
      "Label 2 예시:\n",
      "- Premise: Can you describe him at all?\"\n",
      "  Hypothesis: Thank you for describing him in great detail.\n",
      "- Premise: GSA, IRS, and the Department of Justice have established gain-sharing programs that enable frequent travelers to share in the savings they achieve in airfares, lodging costs, or both.\n",
      "  Hypothesis: Increased traveling rates have been established through the Department of Justice's travel-gain program.\n",
      "- Premise: In the absence of an audit report, auditors should also write a memorandum for the record that summarizes the results of the work to the date of termination and explains why the audit was terminated.\n",
      "  Hypothesis: In the absence of an audit report, no addition paperwork is required.\n"
     ]
    }
   ],
   "source": [
    "for label in train_df['label'].unique():\n",
    "    examples = train_df[train_df['label'] == label].sample(3)\n",
    "    print(f\"\\nLabel {label} 예시:\")\n",
    "    for i, row in examples.iterrows():\n",
    "        print(f\"- Premise: {row['premise']}\")\n",
    "        print(f\"  Hypothesis: {row['hypothesis']}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "어떤 라벨이 어떤 뜻인지 헷갈렸는데 예시 찍어보고 다시 확인\n",
    "\n",
    "* label 0 - Entailment\n",
    "  * 의미가 거의 같거나, 하나가 다른 하나로부터 도출됨\n",
    "* label 1 - Neutral\n",
    "* Label 2 - Contradiction\n",
    "  * 전제와 가설이 명백히 상반됨"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. dataset 준비\n",
    "\n",
    "* tokenizer 불러오기\n",
    "* dataset 만들기\n",
    "* collate_fn 안에서 여러 처리\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/jovyan/NLP_study/myenv/lib/python3.12/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
      "  from .autonotebook import tqdm as notebook_tqdm\n"
     ]
    }
   ],
   "source": [
    "from transformers import AutoTokenizer\n",
    "\n",
    "def get_tokenizer(model_name):\n",
    "    return AutoTokenizer.from_pretrained(model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import Dataset\n",
    "\n",
    "class Dataset_Maker(Dataset):\n",
    "    def __init__(self, df):\n",
    "        self.pairs = list(zip(df['premise'], df['hypothesis']))\n",
    "        self.labels = df['label'].tolist()\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.labels)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return {\n",
    "            'text_pair': self.pairs[idx],\n",
    "            'label': self.labels[idx]\n",
    "        }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* collate_fn\n",
    "  * premises와 hypotheses를 한 문장 쌍으로 만듬\n",
    "  * 패딩 처리\n",
    "  * truncation 처리\n",
    "  * masking은 attention_mask 사용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "def collate_fn(batch, tokenizer, max_length=256):\n",
    "    premises, hypotheses = zip(*[item['text_pair'] for item in batch])\n",
    "    labels = [item['label'] for item in batch]\n",
    "\n",
    "    encodings = tokenizer(\n",
    "        list(premises),\n",
    "        list(hypotheses),\n",
    "        padding=True,\n",
    "        truncation=True,\n",
    "        max_length=max_length,\n",
    "        return_tensors='pt'\n",
    "    )\n",
    "    encodings['labels'] = torch.tensor(labels, dtype=torch.long)\n",
    "    return encodings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_name = \"distilbert-base-uncased\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import DataLoader\n",
    "\n",
    "tokenizer = get_tokenizer(model_name)\n",
    "\n",
    "def get_dataloader(tokenizer, train_df, test_df, batch_size):\n",
    "    max_length = tokenizer.model_max_length\n",
    "\n",
    "    train_ds = Dataset_Maker(train_df)\n",
    "    train_loader = DataLoader(\n",
    "        train_ds,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=True,\n",
    "        collate_fn=lambda batch: collate_fn(batch, tokenizer, max_length)\n",
    "    )\n",
    "\n",
    "    test_ds = Dataset_Maker(test_df)\n",
    "    test_loader = DataLoader(\n",
    "        test_ds,\n",
    "        batch_size=batch_size,\n",
    "        shuffle=False,\n",
    "        collate_fn=lambda batch: collate_fn(batch, tokenizer, max_length)\n",
    "    )\n",
    "    return train_loader, test_loader\n",
    "\n",
    "train_loader, test_loader = get_dataloader(tokenizer, train_df, test_df, 64)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Model 구성\n",
    "* pretrained model 불러오기\n",
    "* MNLIClassifier 구조잡기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch.nn as nn\n",
    "from transformers import AutoModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MNLIClassifier(nn.Module):\n",
    "    def __init__(self, model_name):\n",
    "        super().__init__()\n",
    "        self.model_name = model_name\n",
    "        self.pretrained_model = AutoModel.from_pretrained(model_name)\n",
    "        hidden_size = self.pretrained_model.config.hidden_size\n",
    "\n",
    "        self.classifier = nn.Linear(hidden_size, 3)\n",
    "\n",
    "\n",
    "    def forward(self, input_ids, attention_mask, token_type_ids=None):\n",
    "        outputs = self.pretrained_model(\n",
    "            input_ids=input_ids,\n",
    "            attention_mask=attention_mask\n",
    "        )\n",
    "        cls_output = outputs.last_hidden_state[:, 0, :]  # CLS 위치\n",
    "        pred_output = self.classifier(cls_output)\n",
    "        return pred_output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = MNLIClassifier(model_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MNLIClassifier(\n",
      "  (pretrained_model): DistilBertModel(\n",
      "    (embeddings): Embeddings(\n",
      "      (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
      "      (position_embeddings): Embedding(512, 768)\n",
      "      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "      (dropout): Dropout(p=0.1, inplace=False)\n",
      "    )\n",
      "    (transformer): Transformer(\n",
      "      (layer): ModuleList(\n",
      "        (0-5): 6 x TransformerBlock(\n",
      "          (attention): DistilBertSdpaAttention(\n",
      "            (dropout): Dropout(p=0.1, inplace=False)\n",
      "            (q_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "            (k_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "            (v_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "            (out_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "          )\n",
      "          (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "          (ffn): FFN(\n",
      "            (dropout): Dropout(p=0.1, inplace=False)\n",
      "            (lin1): Linear(in_features=768, out_features=3072, bias=True)\n",
      "            (lin2): Linear(in_features=3072, out_features=768, bias=True)\n",
      "            (activation): GELUActivation()\n",
      "          )\n",
      "          (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "        )\n",
      "      )\n",
      "    )\n",
      "  )\n",
      "  (classifier): Linear(in_features=768, out_features=3, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "for param in model.pretrained_model.parameters():\n",
    "    param.required_grad=False"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. finetuning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate_acc(preds, labels):\n",
    "    correct = (preds == labels).sum().item()\n",
    "    total = labels.size(0)\n",
    "    return correct/total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_eval(model, dataloader, device):\n",
    "    model.eval()\n",
    "    total_loss = 0\n",
    "    total_acc = 0\n",
    "    total_count = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch in dataloader:\n",
    "            input_ids = batch['input_ids'].to(device)\n",
    "            attention_mask = batch['attention_mask'].to(device)\n",
    "            labels = batch['labels'].to(device)\n",
    "\n",
    "            logits = model(input_ids, attention_mask)\n",
    "            loss = nn.functional.cross_entropy(logits, labels)\n",
    "\n",
    "            preds = logits.argmax(dim=1)\n",
    "            acc = evaluate_acc(preds, labels)\n",
    "\n",
    "            total_loss += loss.item()\n",
    "            total_acc += acc * labels.size(0)\n",
    "            total_count += labels.size(0)\n",
    "\n",
    "    avg_loss = total_loss / len(dataloader)\n",
    "    avg_acc = total_acc / total_count\n",
    "    return avg_loss, avg_acc\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_train(model, train_loader, test_loader, optimizer, loss_fn, num_epochs):\n",
    "    device = 'cuda'\n",
    "    loss_list = []\n",
    "    test_acc_list = []\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        total_loss = 0\n",
    "\n",
    "        for batch in tqdm(train_loader, desc=f\"Epoch {epoch + 1}/{num_epochs}\"):\n",
    "            input_ids = batch['input_ids'].to(device)\n",
    "            attention_mask = batch['attention_mask'].to(device)\n",
    "            labels = batch['labels'].to(device)\n",
    "\n",
    "            optimizer.zero_grad()\n",
    "            preds = model(input_ids, attention_mask)\n",
    "\n",
    "            loss = loss_fn(preds, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "\n",
    "            total_loss += loss.item()\n",
    "\n",
    "        train_loss = total_loss\n",
    "\n",
    "        val_loss, val_acc = model_eval(model, test_loader, device)\n",
    "\n",
    "        print(f\"[Epoch {epoch+1}] Train Loss: {train_loss:.4f} | Val Loss: {val_loss:.4f} | Val Acc: {val_acc:.4f}\")\n",
    "        loss_list.append(train_loss)\n",
    "        test_acc_list.append(val_acc)\n",
    "    return loss_list, test_acc_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.optim import Adam, AdamW\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/3:   0%|          | 2/6136 [00:00<11:34,  8.83it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/3: 100%|██████████| 6136/6136 [12:26<00:00,  8.21it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 1] Train Loss: 6756.5390 | Val Loss: 1.0979 | Val Acc: 0.3545\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 2/3: 100%|██████████| 6136/6136 [12:29<00:00,  8.19it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 2] Train Loss: 6744.9083 | Val Loss: 1.0994 | Val Acc: 0.3274\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 3/3: 100%|██████████| 6136/6136 [12:35<00:00,  8.13it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 3] Train Loss: 6743.2022 | Val Loss: 1.0985 | Val Acc: 0.3545\n"
     ]
    }
   ],
   "source": [
    "model = model.to('cuda')\n",
    "loss_fn = nn.CrossEntropyLoss()\n",
    "\n",
    "lr = 0.001\n",
    "optimizer = Adam(model.parameters(), lr=lr)\n",
    "n_epochs = 3\n",
    "\n",
    "loss_list, test_acc = model_train(model, train_loader, test_loader, optimizer, loss_fn, n_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss_accuracy(loss_list, test_acc)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### plot\n",
    "* plot_loss_accuracy\n",
    "* compare_accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def plot_loss_accuracy(loss_list, acc_list):\n",
    "    plt.figure(figsize=(12, 5))\n",
    "\n",
    "    plt.subplot(1, 2, 1)\n",
    "    plt.plot(loss_list, marker='o')\n",
    "    plt.title(\"Train Loss\")\n",
    "    plt.xlabel(\"Epoch\")\n",
    "    plt.ylabel(\"Loss\")\n",
    "\n",
    "    plt.subplot(1, 2, 2)\n",
    "    plt.plot(acc_list, marker='o')\n",
    "    plt.title(\"Validation Accuracy\")\n",
    "    plt.xlabel(\"Epoch\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compare_accuracy(acc_list_1, acc_list_2, label1=\"Model 1\", label2=\"Model 2\"):\n",
    "    epochs = range(1, len(acc_list_2) + 1)\n",
    "\n",
    "    plt.figure(figsize=(8, 5))\n",
    "    plt.plot(epochs, acc_list_1, marker='o', label=label1)\n",
    "    plt.plot(epochs, acc_list_2, marker='o', label=label2)\n",
    "    plt.title(\"Validation Accuracy Comparison\")\n",
    "    plt.xlabel(\"Epoch\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.legend()\n",
    "    plt.grid(True)\n",
    "    plt.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_first_value(list1, list2, label1, label2):\n",
    "    value1 = list1[0]\n",
    "    value2 = list2[0]\n",
    "\n",
    "    plt.bar([label1, label2], [value1, value2])\n",
    "    plt.ylabel('value')\n",
    "    plt.title('acc comparison')\n",
    "    plt.ylim(0, max(value1, value2) * 1.2)\n",
    "\n",
    "    for i, v in enumerate([value1, value2]):\n",
    "        plt.text(i, v+0.01, f'{v:.3f}', ha='center')\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "#### 변형 1\n",
    "* lr 낮추기\n",
    "* dropout 추가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MNLIClassifierWithDropout(nn.Module):\n",
    "    def __init__(self, model_name):\n",
    "        super().__init__()\n",
    "        self.model_name = model_name\n",
    "        self.pretrained_model = AutoModel.from_pretrained(model_name)\n",
    "        hidden_size = self.pretrained_model.config.hidden_size\n",
    "\n",
    "        self.classifier = nn.Linear(hidden_size, 3)\n",
    "        self.dropout = nn.Dropout(0.1)\n",
    "\n",
    "        print(f\"** load pretrained model {model_name} **\")\n",
    "        print(self.pretrained_model)\n",
    "\n",
    "    def forward(self, input_ids, attention_mask, token_type_ids=None):\n",
    "        outputs = self.pretrained_model(\n",
    "            input_ids=input_ids,\n",
    "            attention_mask=attention_mask\n",
    "        )\n",
    "        cls_output = outputs.last_hidden_state[:, 0, :]  # CLS 위치\n",
    "        cls_output = self.dropout(cls_output)\n",
    "        pred_output = self.classifier(cls_output)\n",
    "        return pred_output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "** load pretrained model distilbert-base-uncased **\n",
      "DistilBertModel(\n",
      "  (embeddings): Embeddings(\n",
      "    (word_embeddings): Embedding(30522, 768, padding_idx=0)\n",
      "    (position_embeddings): Embedding(512, 768)\n",
      "    (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "    (dropout): Dropout(p=0.1, inplace=False)\n",
      "  )\n",
      "  (transformer): Transformer(\n",
      "    (layer): ModuleList(\n",
      "      (0-5): 6 x TransformerBlock(\n",
      "        (attention): DistilBertSdpaAttention(\n",
      "          (dropout): Dropout(p=0.1, inplace=False)\n",
      "          (q_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "          (k_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "          (v_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "          (out_lin): Linear(in_features=768, out_features=768, bias=True)\n",
      "        )\n",
      "        (sa_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "        (ffn): FFN(\n",
      "          (dropout): Dropout(p=0.1, inplace=False)\n",
      "          (lin1): Linear(in_features=768, out_features=3072, bias=True)\n",
      "          (lin2): Linear(in_features=3072, out_features=768, bias=True)\n",
      "          (activation): GELUActivation()\n",
      "        )\n",
      "        (output_layer_norm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n",
      "      )\n",
      "    )\n",
      "  )\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "model2 = MNLIClassifierWithDropout(model_name)\n",
    "model2 = model2.to('cuda')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "for param in model2.pretrained_model.parameters():\n",
    "    param.required_grad=False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/3: 100%|██████████| 6136/6136 [12:29<00:00,  8.19it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 1] Train Loss: 3661.7596 | Val Loss: 0.4942 | Val Acc: 0.8047\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 2/3: 100%|██████████| 6136/6136 [12:35<00:00,  8.12it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 2] Train Loss: 2686.7961 | Val Loss: 0.4799 | Val Acc: 0.8118\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 3/3: 100%|██████████| 6136/6136 [12:39<00:00,  8.08it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 3] Train Loss: 2095.9718 | Val Loss: 0.5055 | Val Acc: 0.8133\n"
     ]
    }
   ],
   "source": [
    "lr = 2e-5\n",
    "optimizer = Adam(model2.parameters(), lr=lr)\n",
    "n_epochs = 3\n",
    "\n",
    "loss_list_2, test_acc_2 = model_train(model2, train_loader, test_loader, optimizer, loss_fn, n_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABKUAAAHqCAYAAADVi/1VAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjEsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvc2/+5QAAAAlwSFlzAAAPYQAAD2EBqD+naQAAs8RJREFUeJzs3Xd4FGWjxuHfbnpIgSQkIRAgtGAogVBCkKYiRUQUC02aIIpgAQugApajKDZEEQQRUEJXUETBCAIioffeOyGEkEJC2u6eP5D9jIBSQiblua9rr/PtzLuzz6yc7OTJzDsmm81mQ0REREREREREJB+ZjQ4gIiIiIiIiIiLFj0opERERERERERHJdyqlREREREREREQk36mUEhERERERERGRfKdSSkRERERERERE8p1KKRERERERERERyXcqpUREREREREREJN+plBIRERERERERkXynUkpERERERERERPKdSikRKRZ69epFxYoVjY4hIiIixdyRI0cwmUxMnTrVvuyNN97AZDJd1+tNJhNvvPFGnmZq0aIFLVq0yNNtiohcD5VSImIok8l0XY/ly5cbHTWX5cuXYzKZmDdvntFRRERE5DZ54IEHcHd3JzU19ZpjunXrhrOzM+fOncvHZDdu165dvPHGGxw5csToKFf1888/YzKZCAoKwmq1Gh1HRPKJo9EBRKR4+/bbb3M9/+abb4iJibli+R133HFL7zNp0iQd4IiIiMgN6datGwsXLmT+/Pn06NHjivXp6en88MMPtGnTBl9f35t+n9dff52hQ4feStT/tGvXLt58801atGhxxdnjv/7662197+sRHR1NxYoVOXLkCMuWLaNly5ZGRxKRfKBSSkQM9fjjj+d6vmbNGmJiYq5Y/k/p6em4u7tf9/s4OTndVD4REREpvh544AE8PT2ZMWPGVUupH374gbS0NLp163ZL7+Po6Iijo3G/mjk7Oxv23gBpaWn88MMPjBo1iilTphAdHV1gS6m0tDRKlChhdAyRIkOX74lIgdeiRQtq1qzJxo0badasGe7u7rz66qvApYPBdu3aERQUhIuLC5UrV+btt9/GYrHk2sY/55S6PJ/Dhx9+yMSJE6lcuTIuLi40aNCA9evX51n2Q4cO8eijj+Lj44O7uzuNGjVi0aJFV4z77LPPqFGjBu7u7pQqVYr69eszY8YM+/rU1FReeOEFKlasiIuLC/7+/tx7771s2rQpz7KKiIhIbm5ubnTs2JGlS5cSHx9/xfoZM2bg6enJAw88QGJiIi+99BK1atXCw8MDLy8v2rZty9atW//zfa42p1RmZiaDBg2idOnS9vc4ceLEFa89evQozzzzDKGhobi5ueHr68ujjz6a6zK9qVOn8uijjwJw1113XTE9wtXmlIqPj6dPnz4EBATg6upKeHg406ZNyzUmr46n5s+fz8WLF3n00Ufp3Lkz33//PRkZGVeMy8jI4I033qBatWq4urpSpkwZOnbsyMGDB+1jrFYrn376KbVq1cLV1ZXSpUvTpk0bNmzYkCvz3+f0uuyf83Vd/u+ya9cuunbtSqlSpWjSpAkA27Zto1evXlSqVAlXV1cCAwN54oknrnoZ58mTJ+nTp4/9eDUkJIT+/fuTlZXFoUOHMJlMfPLJJ1e8bvXq1ZhMJmbOnHndn6VIYaMzpUSkUDh37hxt27alc+fOPP744wQEBACXDrI8PDwYPHgwHh4eLFu2jBEjRpCSksIHH3zwn9udMWMGqampPPXUU5hMJkaPHk3Hjh05dOjQLZ9ddebMGRo3bkx6ejrPPfccvr6+TJs2jQceeIB58+bx0EMPAZcuLXzuued45JFHeP7558nIyGDbtm2sXbuWrl27AvD0008zb948Bg4cSFhYGOfOnWPVqlXs3r2biIiIW8opIiIi19atWzemTZvGnDlzGDhwoH15YmIiS5YsoUuXLri5ubFz504WLFjAo48+SkhICGfOnOHLL7+kefPm7Nq1i6CgoBt63759+zJ9+nS6du1K48aNWbZsGe3atbti3Pr161m9ejWdO3emXLlyHDlyhPHjx9OiRQt27dqFu7s7zZo147nnnmPs2LG8+uqr9mkRrjU9wsWLF2nRogUHDhxg4MCBhISEMHfuXHr16kVSUhLPP/98rvG3ejwVHR3NXXfdRWBgIJ07d2bo0KEsXLjQXqQBWCwW7r//fpYuXUrnzp15/vnnSU1NJSYmhh07dlC5cmUA+vTpw9SpU2nbti19+/YlJyeHP/74gzVr1lC/fv3r/vz/7tFHH6Vq1aq8++672Gw2AGJiYjh06BC9e/cmMDCQnTt3MnHiRHbu3MmaNWvsJeOpU6do2LAhSUlJ9OvXj+rVq3Py5EnmzZtHeno6lSpV4s477yQ6OppBgwZd8bl4enrSoUOHm8otUijYREQKkAEDBtj++aOpefPmNsA2YcKEK8anp6dfseypp56yubu72zIyMuzLevbsaatQoYL9+eHDh22AzdfX15aYmGhf/sMPP9gA28KFC/815++//24DbHPnzr3mmBdeeMEG2P744w/7stTUVFtISIitYsWKNovFYrPZbLYOHTrYatSo8a/v5+3tbRswYMC/jhEREZG8l5OTYytTpowtKioq1/IJEybYANuSJUtsNpvNlpGRYf9uv+zw4cM2FxcX21tvvZVrGWCbMmWKfdnIkSNzHf9s2bLFBtieeeaZXNvr2rWrDbCNHDnSvuxqx0KxsbE2wPbNN9/Yl82dO9cG2H7//fcrxjdv3tzWvHlz+/MxY8bYANv06dPty7KysmxRUVE2Dw8PW0pKSq59udnjKZvNZjtz5ozN0dHRNmnSJPuyxo0b2zp06JBr3Ndff20DbB9//PEV27BarTabzWZbtmyZDbA999xz1xxztc//sn9+tpf/u3Tp0uWKsVf73GfOnGkDbCtXrrQv69Gjh81sNtvWr19/zUxffvmlDbDt3r3bvi4rK8vm5+dn69mz5xWvEylKdPmeiBQKLi4u9O7d+4rlbm5u9v+dmppKQkICTZs2JT09nT179vzndjt16kSpUqXsz5s2bQpcuuzuVv388880bNjQfpo3gIeHB/369ePIkSPs2rULgJIlS3LixIl/Pc29ZMmSrF27llOnTt1yLhEREbl+Dg4OdO7cmdjY2FyXxM2YMYOAgADuuece4NKxitl86dcri8XCuXPn8PDwIDQ09IYvt//5558BeO6553Itf+GFF64Y+/djoezsbM6dO0eVKlUoWbLkTV/m//PPPxMYGEiXLl3sy5ycnHjuuee4cOECK1asyDX+Vo6nZs2ahdls5uGHH7Yv69KlC7/88gvnz5+3L/vuu+/w8/Pj2WefvWIbl89K+u677zCZTIwcOfKaY27G008/fcWyv3/uGRkZJCQk0KhRIwD75261WlmwYAHt27e/6llalzM99thjuLq6Eh0dbV+3ZMkSEhIS/nOeVZHCTqWUiBQKZcuWveoknDt37uShhx7C29sbLy8vSpcubf/yTk5O/s/tli9fPtfzywdUfz8IullHjx4lNDT0iuWXT5U/evQoAEOGDMHDw4OGDRtStWpVBgwYwJ9//pnrNaNHj2bHjh0EBwfTsGFD3njjjTwpzkREROS/XZ7I/PJ8jydOnOCPP/6gc+fOODg4AJcKiE8++YSqVavi4uKCn58fpUuXZtu2bdd1TPJ3R48exWw22y9Ju+xqxxUXL15kxIgRBAcH53rfpKSkG37fv79/1apV7SXbZf88hrnsVo6npk+fTsOGDTl37hwHDhzgwIED1K1bl6ysLObOnWsfd/DgQUJDQ/91QviDBw8SFBSEj4/Pf77vjQgJCbliWWJiIs8//zwBAQG4ublRunRp+7jLn/vZs2dJSUmhZs2a/7r9kiVL0r59+1zziUZHR1O2bFnuvvvuPNwTkYJHpZSIFAp//2vUZUlJSTRv3pytW7fy1ltvsXDhQmJiYnj//feBSweH/+XygeQ/2f6aLyA/3HHHHezdu5dZs2bRpEkTvvvuO5o0aZLrr3yPPfYYhw4d4rPPPiMoKIgPPviAGjVq8Msvv+RbThERkeKqXr16VK9e3T7h9MyZM7HZbLnuuvfuu+8yePBgmjVrxvTp01myZAkxMTHUqFHjuo5Jbtazzz7LO++8w2OPPcacOXP49ddfiYmJwdfX97a+79/d7PHU/v37Wb9+PatWraJq1ar2x+WzzP9+5lBeudYZU/+8Sc7fXe049LHHHmPSpEk8/fTTfP/99/z6668sXrwYuL5j0H/q0aMHhw4dYvXq1aSmpvLjjz/SpUuXK4pBkaJGE52LSKG1fPlyzp07x/fff0+zZs3syw8fPmxgqv+pUKECe/fuvWL55csKK1SoYF9WokQJOnXqRKdOncjKyqJjx4688847DBs2DFdXVwDKlCnDM888wzPPPEN8fDwRERG88847tG3bNn92SEREpBjr1q0bw4cPZ9u2bcyYMYOqVavSoEED+/p58+Zx1113MXny5FyvS0pKws/P74beq0KFClitVvvZQZdd7bhi3rx59OzZk48++si+LCMjg6SkpFzjbuTytQoVKrBt2zasVmuuUuRqxzC3Ijo6GicnJ7799tsriq1Vq1YxduxYjh07Rvny5alcuTJr164lOzv7mpOnV65cmSVLlpCYmHjNs6Uun8X1z8/nn2d//Zvz58+zdOlS3nzzTUaMGGFfvn///lzjSpcujZeXFzt27PjPbbZp04bSpUsTHR1NZGQk6enpdO/e/boziRRWql1FpNC6fPDy97/CZWVl8cUXXxgVKZf77ruPdevWERsba1+WlpbGxIkTqVixImFhYQBX3DrY2dmZsLAwbDYb2dnZWCyWK06/9/f3JygoiMzMzNu/IyIiImI/K2rEiBFs2bIl11lScOm45J9nBs2dO5eTJ0/e8Htd/oPT2LFjcy0fM2bMFWOv9r6fffbZFWf+lChRAriyjLma++67j7i4OGbPnm1flpOTw2effYaHhwfNmze/nt34T9HR0TRt2pROnTrxyCOP5Hq8/PLLAPaz0x5++GESEhL4/PPPr9jO5f1/+OGHsdlsvPnmm9cc4+XlhZ+fHytXrsy1/kaOH692DApX/vcxm808+OCDLFy4kA0bNlwzE4CjoyNdunRhzpw5TJ06lVq1alG7du3rziRSWOlMKREptBo3bkypUqXo2bMnzz33HCaTiW+//TZfL7377rvvrjqhes+ePRk6dCgzZ86kbdu2PPfcc/j4+DBt2jQOHz7Md999Z//LY6tWrQgMDOTOO+8kICCA3bt38/nnn9OuXTs8PT1JSkqiXLlyPPLII4SHh+Ph4cFvv/3G+vXrc/1VVERERG6fkJAQGjduzA8//ABwRSl1//3389Zbb9G7d28aN27M9u3biY6OplKlSjf8XnXq1KFLly588cUXJCcn07hxY5YuXcqBAweuGHv//ffz7bff4u3tTVhYGLGxsfz222/4+vpesU0HBwfef/99kpOTcXFx4e6778bf3/+Kbfbr148vv/ySXr16sXHjRipWrMi8efP4888/GTNmDJ6enje8T/+0du1aDhw4wMCBA6+6vmzZskRERBAdHc2QIUPo0aMH33zzDYMHD2bdunU0bdqUtLQ0fvvtN5555hk6dOjAXXfdRffu3Rk7diz79++nTZs2WK1W/vjjD+666y77e/Xt25f33nuPvn37Ur9+fVauXMm+ffuuO7uXlxfNmjVj9OjRZGdnU7ZsWX799dernq3/7rvv8uuvv9K8eXP69evHHXfcwenTp5k7dy6rVq2iZMmS9rE9evRg7Nix/P777/bpKESKOpVSIlJo+fr68tNPP/Hiiy/y+uuvU6pUKR5//HHuueceWrdunS8ZZs2addXlLVq0oEmTJqxevZohQ4bw2WefkZGRQe3atVm4cCHt2rWzj33qqaeIjo7m448/5sKFC5QrV47nnnuO119/HQB3d3eeeeYZfv31V77//nusVitVqlThiy++oH///vmynyIiInKpiFq9ejUNGzakSpUquda9+uqrpKWlMWPGDGbPnk1ERASLFi1i6NChN/VeX3/9tf1yrgULFnD33XezaNEigoODc4379NNPcXBwIDo6moyMDO68805+++23K46FAgMDmTBhAqNGjaJPnz5YLBZ+//33q5ZSbm5uLF++nKFDhzJt2jRSUlIIDQ1lypQp9OrV66b2558uzxfVvn37a45p3749b7zxBtu2baN27dr8/PPPvPPOO8yYMYPvvvsOX19fmjRpQq1ateyvmTJlCrVr12by5Mm8/PLLeHt7U79+fRo3bmwfM2LECM6ePcu8efOYM2cObdu25ZdffrnqZ3EtM2bM4Nlnn2XcuHHYbDZatWrFL7/8QlBQUK5xZcuWZe3atQwfPpzo6GhSUlIoW7Ysbdu2xd3dPdfYevXqUaNGDXbv3n1F6SlSVJls+XlKgYiIiIiIiIhcVd26dfHx8WHp0qVGRxHJF5pTSkRERERERMRgGzZsYMuWLfTo0cPoKCL5RmdKiYiIiIiIiBhkx44dbNy4kY8++oiEhAQOHTpkv/uySFGnM6VEREREREREDDJv3jx69+5NdnY2M2fOVCElxYrOlBIRERERERERkXynM6VERERERERERCTfqZQSEREREREREZF852h0gMLAarVy6tQpPD09MZlMRscRERGR28xms5GamkpQUBBms/6Gd6t0LCUiIlK8XO+xlEqp63Dq1CmCg4ONjiEiIiL57Pjx45QrV87oGIWejqVERESKp/86llIpdR08PT2BSx+ml5eXwWlERETkdktJSSE4ONh+DCC3RsdSIiIixcv1HkuplLoOl08z9/Ly0oGUiIhIMaJLzfKGjqVERESKp/86ltIkCSIiIiIiIiIiku9USomIiIiIiIiISL5TKSUiIiIiIiIiIvlOpZSIiIiIiIiIiOQ7lVIiIiIiIiIiIpLvVEqJiIiIiIiIiEi+UyklIiIiIiIiIiL5TqWUiIiIiIiIiIjkO5VSIiIiIiIiIiKS71RKiYiIiIiIiIhIvlMpJSIiIiIiIiIi+c7R6ADFncVqY93hROJTM/D3dKVhiA8OZpPRsURERERERESkiCooXYRKKQMt3nGaNxfu4nRyhn1ZGW9XRrYPo03NMgYmExEREREREZGiqCB1Ebp8zyCLd5ym//RNuf4RAMQlZ9B/+iYW7zht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5WV0nEJj8Y44Bs7YRI7VRrtaZRjTuQ5OKqZERKQQKKjf/ZGRkTRo0IDPP/8cAKvVSnBwMM8++yxDhw69YvzAgQPZvXs3S5cutS978cUXWbt2LatWrbpivMlkYv78+Tz44IP/mmP9+vU0bNiQo0ePUr58+f/MXVA/TxEp2o6eS2PlX/NCxR48R1qWJdf6WmW9aV6tNM2qlaZu+ZL6XUUkD13vd7/OlJLbpk3NQMY/Xo9nojeyaPtpLFYbY7vUxdlRP+xFRERuVFZWFhs3bmTYsGH2ZWazmZYtWxIbG3vV1zRu3Jjp06ezbt06GjZsyKFDh/j555/p3r37LWVJTk7GZDJRsmTJW9qOiEheSsvMYc2hc6z4a26oI+fSc63383CmWdVLJVSTqn74ebgYlFRELlMpJbfVvWEBfNm9Hk9/u4nFO+MYMGMT47pGqJgSERG5QQkJCVgsFgICAnItDwgIYM+ePVd9TdeuXUlISKBJkybYbDZycnJ4+umnefXVV286R0ZGBkOGDKFLly7X/MtnZmYmmZmZ9ucpKSlXHScicitsNht74lLtJdT6I4lkW/53IZCj2US9CqXsd8oLK+OFWTdhEilQDG0Gxo8fT+3atfHy8sLLy4uoqCh++eWXK8bZbDbatm171ck3jx07Rrt27XB3d8ff35+XX36ZnJycXGOWL19OREQELi4uVKlShalTp97GvZJ/urt6ABN71MPZ0UzMrjP0n76RzBzLf79QREREbsny5ct59913+eKLL9i0aRPff/89ixYt4u23376p7WVnZ/PYY49hs9kYP378NceNGjUKb29v+yM4OPhmd0FEJJfzaVks3HqKl+ZuJfLdpbT99A/e+2UPqw+eI9tio1wpN7pFlmdi93psHnEvs5+KYsBdVahZ1luFlEgBZOiZUuXKleO9996jatWq2Gw2pk2bRocOHdi8eTM1atSwjxszZsxV73BgsVho164dgYGBrF69mtOnT9OjRw+cnJx49913ATh8+DDt2rXj6aefJjo6mqVLl9K3b1/KlClD69at821fi7sWof581aM+T36zgaV74nnq241MeLwerk4ORkcTEREpFPz8/HBwcODMmTO5lp85c4bAwMCrvmb48OF0796dvn37AlCrVi3S0tLo168fr732Gmbz9f998nIhdfToUZYtW/av80MMGzaMwYMH25+npKSo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981Glu05Y3QsEZFCadeuXURERFyxvG7duuzatcuARCJys77beIKZ645hMsGnnetQxtvN6EgiIoWeSikRuYKzo5kvukXQtmYgWRYrT327kZhdKqZERG6Ui4sLZ85c+fPz9OnTODoaehNkEbkBe+JSeG3BdgBeuKcaTauWNjiRiEjRoFJKRK7KycHM2C51aVerDNkWG/2nb2TxjjijY4mIFCqtWrVi2LBhJCcn25clJSXx6quv2u82LCIFW2pGNv2nbyIj20qzaqV59u4qRkcSESkyVEqJyDU5OZj5tHMd2ocHkWO1MXDGJn7eftroWCIihcaHH37I8ePHqVChAnfddRd33XUXISEhxMXF8dFHHxkdT0T+g81mY8h32zickEaQtytjOtXBbDYZHUtEpMjQeeMi8q8cHcx88lg4jmYT8zef5NmZm7FYbbQPDzI6mohIgVe2bFm2bdtGdHQ0W7duxc3Njd69e9OlSxecnJyMjici/2HKn0f4eXscTg4mPu8WgU8JZ6MjiYgUKSqlROQ/OTqY+fDRcMwmE99tOsHzszZjtdnoUKes0dFERAq8EiVK0K9fP6NjiMgN2nj0PO/+vBuA1+67g4jypQxOJCJS9KiUEpHr4mA28cEjtXEww5wNJxg0ewsWq42OEeWMjiYiUuDt2rWLY8eOkZWVlWv5Aw88YFAiEfk35y5kMnDGJnKsNu6vXYaejSsaHUlEpEhSKSUi181sNvFex9o4mE3MXHecF+duxWK18Wj9YKOjiYgUSIcOHeKhhx5i+/btmEwmbDYbACbTpTlpLBaLkfFE5CosVhsvzN7C6eQMKpUuwXsP17b//6yIiOStm5ro/Pjx45w4ccL+fN26dbzwwgtMnDgxz4KJSMFkNpt458FaPN6oPDYbvPLdNmatO2Z0LBGRAun5558nJCSE+Ph43N3d2blzJytXrqR+/fosX77c6HgichWfLt3PH/sTcHNyYMLj9fBw0d/xRURul5sqpbp27crvv/8OQFxcHPfeey/r1q3jtdde46233srTgCJS8JjNJt7uUJOeURWw2WDo99uJXnvU6FgiIgVObGwsb731Fn5+fpjNZsxmM02aNGHUqFE899xzRscTkX9Yvjeez5btB2BUx1pUC/A0OJGISNF2U6XUjh07aNiwIQBz5syhZs2arF69mujoaKZOnZqX+USkgDKZTLzx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",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_loss_accuracy(loss_list_2, test_acc_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare_accuracy(test_acc, test_acc_2, \"base\", \"lr & dropout\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "너무 드라마틱하게 성능이 올라가서 둘 중 어떤 영향인지 알고 싶음. epoch당 성능 증가가 크지 않으니 1epoch으로 나머지 실험을 해보고자 한다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1. learning rate만 수정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/1:   0%|          | 1/6136 [00:00<13:52,  7.37it/s]"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 1/1: 100%|██████████| 6136/6136 [12:37<00:00,  8.10it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Epoch 1] Train Loss: 3669.3191 | Val Loss: 0.4995 | Val Acc: 0.8015\n"
     ]
    }
   ],
   "source": [
    "model3 = MNLIClassifier(model_name)\n",
    "model3 = model3.to('cuda')\n",
    "for param in model3.pretrained_model.parameters():\n",
    "    param.required_grad=False\n",
    "\n",
    "lr = 2e-5\n",
    "optimizer = Adam(model3.parameters(), lr=lr)\n",
    "n_epochs = 1\n",
    "\n",
    "loss_list_3, test_acc_3 = model_train(model3, train_loader, test_loader, optimizer, loss_fn, n_epochs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_first_value(test_acc, test_acc_3, \"base\", \"lr\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- **결론**   \n",
    "  learning rate만 수정해도 성능이 대폭 늘어나는 걸 볼 수 있었다.\n",
    "\n",
    "- **추가**   \n",
    "  나중에 찾아보니 finetune 할때 learning rate는 작게 하는 것이 더 유리하다고 한다.\n",
    "  1. 사전 학습된 지식 보전을 위해\n",
    "  2. 파라미터가 이미 좋은 위치에 있기 때문에\n",
    "  3. lr이 크면 loss가 널뛰기하거나 발산할 위험이 크기 때문에\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
