{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymxatB5WYxlL"
      },
      "source": [
        "# 📌[2주차/기본] 주어진 문장에서 나올 다음 단어를 예측하는 모델 구현\n",
        "\n",
        "이번 과제에서는 Transformer를 last word prediction이라는 task에 적용합니다.\n",
        "Last word prediction은 Token list가 주어졌을 때, 다음으로 오는 token을 예측하는 task로, 추후 등장할 LLM의 핵심입니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1X7RM2du1zcr",
        "outputId": "f091f9f5-b8ab-4877-ce8a-4f22707a69a1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: datasets in ./nyenv/lib/python3.12/site-packages (3.5.0)\n",
            "Requirement already satisfied: sacremoses in ./nyenv/lib/python3.12/site-packages (0.1.1)\n",
            "Requirement already satisfied: filelock in ./nyenv/lib/python3.12/site-packages (from datasets) (3.18.0)\n",
            "Requirement already satisfied: numpy>=1.17 in ./nyenv/lib/python3.12/site-packages (from datasets) (2.2.4)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (19.0.1)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in ./nyenv/lib/python3.12/site-packages (from datasets) (2.2.3)\n",
            "Requirement already satisfied: requests>=2.32.2 in ./nyenv/lib/python3.12/site-packages (from datasets) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in ./nyenv/lib/python3.12/site-packages (from datasets) (4.67.1)\n",
            "Requirement already satisfied: xxhash in ./nyenv/lib/python3.12/site-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.70.16)\n",
            "Requirement already satisfied: fsspec<=2024.12.0,>=2023.1.0 in ./nyenv/lib/python3.12/site-packages (from fsspec[http]<=2024.12.0,>=2023.1.0->datasets) (2024.12.0)\n",
            "Requirement already satisfied: aiohttp in ./nyenv/lib/python3.12/site-packages (from datasets) (3.11.16)\n",
            "Requirement already satisfied: huggingface-hub>=0.24.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.30.1)\n",
            "Requirement already satisfied: packaging in ./nyenv/lib/python3.12/site-packages (from datasets) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in ./nyenv/lib/python3.12/site-packages (from datasets) (6.0.2)\n",
            "Requirement already satisfied: regex in ./nyenv/lib/python3.12/site-packages (from sacremoses) (2024.11.6)\n",
            "Requirement already satisfied: click in ./nyenv/lib/python3.12/site-packages (from sacremoses) (8.1.8)\n",
            "Requirement already satisfied: joblib in ./nyenv/lib/python3.12/site-packages (from sacremoses) (1.4.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (6.2.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.18.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in ./nyenv/lib/python3.12/site-packages (from huggingface-hub>=0.24.0->datasets) (4.13.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (2025.1.31)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in ./nyenv/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n",
            "\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.3.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.0.1\u001b[0m\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "!pip install datasets sacremoses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "foKuFNzizgPj"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "from datasets import load_dataset\n",
        "from torch.utils.data import DataLoader\n",
        "from transformers import BertTokenizerFast\n",
        "from tokenizers import (\n",
        "    decoders,\n",
        "    models,\n",
        "    normalizers,\n",
        "    pre_tokenizers,\n",
        "    processors,\n",
        "    trainers,\n",
        "    Tokenizer,\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-_B0J6kbzC3H"
      },
      "source": [
        "### 📄 데이터 로딩\n",
        "\n",
        "IMDb (Internet Movie database)\n",
        "\n",
        "train 25000개 와 test 25000개로 이루어져 있다.\n",
        "\n",
        "#### 🔍 라벨\n",
        "0 : 부정적인 리뷰\n",
        "1 : 긍정적인 리뷰\n",
        "\n",
        "#### 📦 샘플\n",
        "```python\n",
        "{\n",
        "  'text': \"I watched this movie with my family and we all hated it. The story was weak...\",\n",
        "  'label': 0\n",
        "}\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ojgWEo47yma2"
      },
      "outputs": [],
      "source": [
        "train_ds = load_dataset(\"stanfordnlp/imdb\", split=\"train[:5%]\")\n",
        "test_ds = load_dataset(\"stanfordnlp/imdb\", split=\"test[:5%]\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qi7hDLau0AlG"
      },
      "source": [
        "🔤 tokenizer 설정\n",
        "\n",
        "huggingface에서 bert-base-uncased 모델을 불러와서 설정을 한다.\n",
        "\n",
        "* 토큰화 방식\n",
        " * BERT : 단어를 서브워드 단위로 분해\n",
        " * BPE : 자주 등장하는 문자쌍을 병합\n",
        " * SentencePiece : 공백까지 포함해서 분해\n",
        "\n",
        "* 대소문자 처리\n",
        " * uncased : 모두 소문자로 치환\n",
        " * cased : 대소문자 유지\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HOdhoBVA1zcu",
        "outputId": "69e43e31-0fa5-47cc-a747-1fa512ef8350"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Using cache found in /home/jovyan/.cache/torch/hub/huggingface_pytorch-transformers_main\n"
          ]
        }
      ],
      "source": [
        "tokenizer = torch.hub.load('huggingface/pytorch-transformers', 'tokenizer', 'bert-base-uncased')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TpHn4zAs3aF6"
      },
      "source": [
        "📦 collate_fn\n",
        "\n",
        "text 데이터는 샘플마다 문장 길이가 다르기 때문에 padding이 필요하다\n",
        "* tokenizer\n",
        " * padding=True : 짧은 문장도 padding을 사용해서 일정한 길이로 맞춰준다..\n",
        " * truncation : 너무 긴 문장은 max_len 기준으로 자름\n",
        "\n",
        "🌟 기존 감정 분류와 달라진 점\n",
        "\n",
        "기본 과제에선 label에 input_ids[-2] 를 넣어주고 있는데, 이는 마지막 단어 예측이 우리 모델의 목표이기 때문이다.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "pjXRfZhc23X6"
      },
      "outputs": [],
      "source": [
        "from torch.nn.utils.rnn import pad_sequence\n",
        "\n",
        "def collate_fn(batch):\n",
        "  max_len = 400\n",
        "  texts, labels = [], []\n",
        "  for row in batch:\n",
        "    labels.append(tokenizer(row['text'], truncation=True, max_length=max_len).input_ids[-3])\n",
        "    texts.append(torch.LongTensor(tokenizer(row['text'], truncation=True, max_length=max_len).input_ids[:-3]))\n",
        "\n",
        "  texts = pad_sequence(texts, batch_first=True, padding_value=tokenizer.pad_token_id)\n",
        "  labels = torch.LongTensor(labels)\n",
        "\n",
        "  return texts, labels\n",
        "\n",
        "\n",
        "train_loader = DataLoader(\n",
        "    train_ds, batch_size=64, shuffle=True, collate_fn=collate_fn\n",
        ")\n",
        "test_loader = DataLoader(\n",
        "    test_ds, batch_size=64, shuffle=False, collate_fn=collate_fn\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-FshZcTZBQ2"
      },
      "source": [
        "## ✏️ Self-attention\n",
        "\n",
        "이번에는 self-attention을 구현해보겠습니다.\n",
        "Self-attention은 shape이 (B, S, D)인 embedding이 들어왔을 때 attention을 적용하여 새로운 representation을 만들어내는 module입니다.\n",
        "\n",
        "여기서 B는 batch size, S는 sequence length, D는 embedding 차원입니다.\n",
        "\n",
        "* forward에서 필요한 입력\n",
        " * x : 입력 시퀀스\n",
        " * mask : 패딩 토큰 무시하거나 casual attention 하는 경우 필요\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "vFUlZn_h22jD"
      },
      "outputs": [],
      "source": [
        "from torch import nn\n",
        "from math import sqrt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "FZRsgrYwAgnq"
      },
      "outputs": [],
      "source": [
        "class SelfAttention(nn.Module):\n",
        "    def __init__(self, input_dim, d_model):\n",
        "        super().__init__()\n",
        "\n",
        "        self.input_dim = input_dim\n",
        "        self.d_model = d_model\n",
        "\n",
        "        self.wq = nn.Linear(input_dim, d_model) #in : (B,S,D) output: (B,S,d_model)\n",
        "        self.wk = nn.Linear(input_dim, d_model)\n",
        "        self.wv = nn.Linear(input_dim, d_model)\n",
        "\n",
        "        self.dense = nn.Linear(d_model, d_model)\n",
        "\n",
        "        self.softmax = nn.Softmax(dim=-1)\n",
        "\n",
        "    def forward(self, x, mask):\n",
        "        q = self.wq(x) #(B,S,d_model)\n",
        "        k = self.wk(x)\n",
        "        v = self.wv(x)\n",
        "\n",
        "        score= torch.matmul(q, k.transpose(-1,-2)) # 뒤에서 첫번째 두번째를 바꿔준다 k.transpose = (B,d_model,S) score = (B,S,S)\n",
        "        score = score / sqrt(self.d_model)\n",
        "\n",
        "        if mask is not None:\n",
        "            score = score + (mask * -1e9)\n",
        "\n",
        "        score = self.softmax(score)\n",
        "        result = torch.matmul(score, v)\n",
        "        result = self.dense(result)\n",
        "\n",
        "        return result"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-S0vMp85ZRNO"
      },
      "source": [
        "대부분 transformer 구조에 대해 그냥 구현한 것에 불과하지만 mask는 새로운 개념\n",
        "\n",
        "단어와 단어 사이의 관계도를 보는 Attention score에서 실제 단어와 패딩 단어 사이의 관계도를 고려할 필요가 전혀 없기 때문에 -1e-9를 더하여, 소프트맥스에서 확률 0이 출력되도록 만든 것입니다"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v9F2SmnljYrl"
      },
      "source": [
        "---\n",
        "### 🧱 TransformerLayer\n",
        "\n",
        "* Self-Attention : 이미 구현해둔 class 사용\n",
        "* Feed-Forward Network (FFN) : MLP 구조 (Linear > ReLU > Linear)\n",
        "  * 각 토큰 하나하나에 대해 독립적으로 처리하는 fully connected network\n",
        "\n",
        "\n",
        "🧠 요약\n",
        "\n",
        "Attention : token간 관계 표현 개선\n",
        "\n",
        "FFN : 각 토큰 자체의 표현 개선\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "VZHPCn9AS5Gp"
      },
      "outputs": [],
      "source": [
        "class TransformerLayer(nn.Module):\n",
        "  def __init__(self, input_dim, d_model, dff):\n",
        "    super().__init__()\n",
        "\n",
        "    self.input_dim = input_dim\n",
        "    self.d_model = d_model\n",
        "    self.dff = dff\n",
        "\n",
        "    self.sa = SelfAttention(input_dim, d_model)\n",
        "    self.ffn = nn.Sequential(\n",
        "      nn.Linear(d_model, dff),\n",
        "      nn.ReLU(),\n",
        "      nn.Linear(dff, d_model)\n",
        "    )\n",
        "\n",
        "  def forward(self, x, mask):\n",
        "    x = self.sa(x, mask)\n",
        "    x = self.ffn(x)\n",
        "\n",
        "    return x"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J3VYrqTJagS1"
      },
      "source": [
        "## 🧮 Positional encoding\n",
        "\n",
        "* 순서 정보를 인코딩해서 모델에 넣어주는 기술\n",
        "* 각 위치마다 고유한 벡터를 만들어서 입력 임베딩에 더해주는 방식\n",
        "* Transformer는 Attention 구조라서 문장을 볼때 병렬로 처리하기 때문에 RNN 처럼 순차적 처리가 되지 않음. 따라서 명시적으로 알려줘야 한다.\n",
        "\n",
        "```python\n",
        "x = token_embedding + positional_encoding\n",
        "```\n",
        "\n",
        "이번에는 positional encoding을 구현합니다. Positional encoding의 식은 다음과 같습니다:\n",
        "$$\n",
        "\\begin{align*} PE_{pos, 2i} &= \\sin\\left( \\frac{pos}{10000^{2i/D}} \\right), \\\\ PE_{pos, 2i+1} &= \\cos\\left( \\frac{pos}{10000^{2i/D}} \\right).\\end{align*}\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uf_jMQWDUR79",
        "outputId": "10d6f172-efab-4451-99e4-f89bdceb5459"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "torch.Size([1, 400, 256])\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "def get_angles(pos, i, d_model):\n",
        "    angle_rates = 1 / np.power(10000, (2 * (i // 2)) / np.float32(d_model))\n",
        "    return pos * angle_rates\n",
        "\n",
        "def positional_encoding(position, d_model):\n",
        "    angle_rads = get_angles(np.arange(position)[:, None], np.arange(d_model)[None, :], d_model)\n",
        "    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n",
        "    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n",
        "    pos_encoding = angle_rads[None, ...]\n",
        "\n",
        "    return torch.FloatTensor(pos_encoding)\n",
        "\n",
        "\n",
        "max_len = 400\n",
        "print(positional_encoding(max_len, 256).shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sSgvgIkImkBM"
      },
      "source": [
        "---\n",
        "## 🔧 LastWordPredictor (basic 과제)\n",
        "\n",
        "#### ⁉️ 변경 사항\n",
        "1. 단어 예측 task인 만큼 tokenizer의 vocab_size로 최종 출력 차원을 조정해준다.\n",
        "2. 문장의 첫번째 토큰 벡터를 뽑는 코드를 삭제하고 마지막 토큰을 뽑도록 한다\n",
        "\n",
        "#### ⁉️ sqrt(d_model) 하는 이유\n",
        "embedding된 벡터는 작은 값인데, positional encoding은 값이 커서 positional encoding의 영향이 너무 큼 > scale up\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "8MaiCGh8TsDH"
      },
      "outputs": [],
      "source": [
        "class LastWordPredictor(nn.Module):\n",
        "  def __init__(self, vocab_size, d_model, n_layers, dff):\n",
        "    super().__init__()\n",
        "\n",
        "    self.vocab_size = vocab_size\n",
        "    self.d_model = d_model\n",
        "    self.n_layers = n_layers\n",
        "    self.dff = dff\n",
        "\n",
        "    self.embedding = nn.Embedding(vocab_size, d_model) # d_model의 차원의 벡터로 embedding\n",
        "    self.pos_encoding = nn.parameter.Parameter(positional_encoding(max_len, d_model), requires_grad=False)\n",
        "    self.layers = nn.ModuleList([TransformerLayer(d_model, d_model, dff) for _ in range(n_layers)]) # n_layer만큼 transformerLayer를 쌓음\n",
        "    self.classification = nn.Linear(d_model, vocab_size)\n",
        "\n",
        "  def forward(self, x):\n",
        "    #패딩 토큰을 찾아서 mask 생성\n",
        "    mask = (x == tokenizer.pad_token_id)\n",
        "    mask = mask[:, None, :] # (B,1,S)\n",
        "\n",
        "    seq_len = x.shape[1]\n",
        "\n",
        "    x = self.embedding(x)\n",
        "    x = x * sqrt(self.d_model)\n",
        "    x = x + self.pos_encoding[:, :seq_len]\n",
        "\n",
        "    for layer in self.layers:\n",
        "      x = layer(x, mask)\n",
        "\n",
        "    x = x[:, -1]\n",
        "    x = self.classification(x)\n",
        "\n",
        "    return x\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QDq05OlAb2lB"
      },
      "source": [
        "## 학습\n",
        "\n",
        "#### 🔧 변경사항\n",
        "* loss_fn 이 BCEWithLigitsLoss 는 이진 분류를 위한 것 이므로 변경\n",
        "* preds 구하는 법과 label을 정수형으로 변경"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "r88BALxO1zc1"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "\n",
        "def accuracy(model, dataloader):\n",
        "  cnt = 0\n",
        "  acc = 0\n",
        "\n",
        "  for data in dataloader:\n",
        "    inputs, labels = data\n",
        "    inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "    preds = model(inputs)\n",
        "    preds = torch.argmax(preds, dim=-1)\n",
        "\n",
        "    cnt += labels.shape[0]\n",
        "    acc += (labels == preds).sum().item()\n",
        "\n",
        "  return acc / cnt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "al_b56TYRILq"
      },
      "outputs": [],
      "source": [
        "def model_train(model, n_epochs):\n",
        "    train_acc_list = []\n",
        "    test_acc_list = []\n",
        "    train_losses = []\n",
        "\n",
        "    for epoch in range(n_epochs):\n",
        "        total_loss = 0.\n",
        "        model.train()\n",
        "        for data in train_loader:\n",
        "            model.zero_grad()\n",
        "            inputs, labels = data\n",
        "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "            preds = model(inputs)\n",
        "            loss = loss_fn(preds, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            total_loss += loss.item()\n",
        "\n",
        "        train_losses.append(total_loss)\n",
        "        print(f\"Epoch {epoch:3d} | Train Loss: {total_loss}\")\n",
        "\n",
        "        with torch.no_grad():\n",
        "            model.eval()\n",
        "            train_acc = accuracy(model, train_loader)\n",
        "            test_acc = accuracy(model, test_loader)\n",
        "            train_acc_list.append(train_acc)\n",
        "            test_acc_list.append(test_acc)\n",
        "            print(f\"=========> Train acc: {train_acc:.3f} | Test acc: {test_acc:.3f}\")\n",
        "    return train_losses, train_acc_list, test_acc_list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j_GMfB1t03ZO",
        "outputId": "232f17b9-ce04-4a9f-98c2-d8151a81462c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 205.60979747772217\n",
            "=========> Train acc: 0.041 | Test acc: 0.024\n",
            "Epoch   1 | Train Loss: 178.1094732284546\n",
            "=========> Train acc: 0.038 | Test acc: 0.027\n",
            "Epoch   2 | Train Loss: 138.7589783668518\n",
            "=========> Train acc: 0.034 | Test acc: 0.034\n",
            "Epoch   3 | Train Loss: 125.07829093933105\n",
            "=========> Train acc: 0.041 | Test acc: 0.023\n",
            "Epoch   4 | Train Loss: 120.8176679611206\n",
            "=========> Train acc: 0.042 | Test acc: 0.026\n",
            "Epoch   5 | Train Loss: 118.85170078277588\n",
            "=========> Train acc: 0.042 | Test acc: 0.024\n",
            "Epoch   6 | Train Loss: 117.80805397033691\n",
            "=========> Train acc: 0.040 | Test acc: 0.022\n",
            "Epoch   7 | Train Loss: 117.15645503997803\n",
            "=========> Train acc: 0.040 | Test acc: 0.049\n",
            "Epoch   8 | Train Loss: 117.00370216369629\n",
            "=========> Train acc: 0.040 | Test acc: 0.049\n",
            "Epoch   9 | Train Loss: 116.3481764793396\n",
            "=========> Train acc: 0.042 | Test acc: 0.023\n"
          ]
        }
      ],
      "source": [
        "from torch.optim import Adam\n",
        "##hyperparam\n",
        "n_epochs = 10\n",
        "lr = 0.001\n",
        "\n",
        "\n",
        "model = LastWordPredictor(len(tokenizer), 32, 2, 64)\n",
        "model = model.to('cuda')\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "\n",
        "optimizer = Adam(model.parameters(), lr=lr)\n",
        "\n",
        "train_losses, train_acc_list, test_acc_list = model_train(model, n_epochs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "u-I121osywgW"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_metrics(train_losses, train_accs, test_accs):\n",
        "    epochs = range(1, len(train_losses) + 1)\n",
        "\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n",
        "\n",
        "    # Loss plot\n",
        "    ax1.plot(epochs, train_losses, marker='o', linestyle='-', color='blue')\n",
        "    ax1.set_title('Training Loss')\n",
        "    ax1.set_xlabel('Epoch')\n",
        "    ax1.set_ylabel('Loss')\n",
        "    ax1.grid(True)\n",
        "\n",
        "    # Accuracy plot\n",
        "    ax2.plot(epochs, train_accs, marker='o', linestyle='-', label='Train Accuracy', color='green')\n",
        "    ax2.plot(epochs, test_accs, marker='x', linestyle='--', label='Test Accuracy', color='red')\n",
        "    ax2.set_title('Accuracy')\n",
        "    ax2.set_xlabel('Epoch')\n",
        "    ax2.set_ylabel('Accuracy')\n",
        "    ax2.legend()\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "rNd9va67yizb"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_metrics(train_losses, train_acc_list, test_acc_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RC5D1qhnzneV"
      },
      "source": [
        "### 💭 결과\n",
        "* loss 는 잘 줄어들고 있음\n",
        "* train test accuracy는 크게 개선되지 않음\n",
        "* 기존 -2 일때는 . 으로 predict 하면 60% 정도는 맞았던거 같은데 오히려 -3 을 하고 나서 정확도가 나오지 않음 (당연한 것 같기도 함)\n",
        "\n",
        "### 🚩 의심가는 점\n",
        "* 학습 데이터 늘려서 해볼 수 있는지\n",
        "* 아니면 fail나는거 한번 까보기\n",
        "\n",
        "---\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saved 1250 predictions to predictions.csv\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "def save_predictions_to_excel(model, dataloader, tokenizer, filename=\"predictions.csv\"):\n",
        "    model.eval()\n",
        "    results = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for data in dataloader:\n",
        "            inputs, labels = data\n",
        "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "            preds = model(inputs)\n",
        "            preds = torch.argmax(preds, dim=-1)\n",
        "\n",
        "            for i in range(inputs.size(0)):\n",
        "                input_ids = inputs[i].tolist()\n",
        "                input_tokens = tokenizer.convert_ids_to_tokens(input_ids)\n",
        "                input_text = tokenizer.convert_tokens_to_string(input_tokens)\n",
        "\n",
        "                pred_id = preds[i].item()\n",
        "                label_id = labels[i].item()\n",
        "\n",
        "                pred_token = tokenizer.convert_ids_to_tokens([pred_id])[0]\n",
        "                label_token = tokenizer.convert_ids_to_tokens([label_id])[0]\n",
        "                correct = pred_id == label_id\n",
        "\n",
        "                results.append({\n",
        "                    \"Input Text\": input_text,\n",
        "                    \"Target Token\": label_token,\n",
        "                    \"Predicted Token\": pred_token,\n",
        "                    \"Correct\": correct\n",
        "                })\n",
        "\n",
        "    df = pd.DataFrame(results)\n",
        "    df.to_csv(filename, index=False, encoding='utf-8-sig')\n",
        "    print(f\"Saved {len(results)} predictions to {filename}\")\n",
        "\n",
        "    return df\n",
        "\n",
        "df = save_predictions_to_excel(model, test_loader, tokenizer)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "|input|label|pred|\n",
        "|--|--|--|\n",
        "|[CLS] i was pulled into this movie early on, much to my surprise, because i hadn ' t intended to watch it at all. now i wish i hadn ' t. the suspense starts out well, with the hit - and - run resulting in death and the question of whether the guilty character will confess, or be found out, or ( doable now, though a no - no in the old days of movie - making ) get away with it. the plot ' s been done before - - what plot hasn ' t - - but the tensions inherent in it, with the additional complications and motivations arising out of the illicit love affair, make for an absorbing first half. then the film abandons the hit - and - run to embark upon a misty exposition of two unrequited, all - suffering loves. the two tracks of plot - - hit - and - run and unreasoning love - - just don ' t have enough to do with each other, and that they involve the same characters doesn ' t bind them enough to justify the departure from the original story line. the screenwriter should have chosen one plot or the other. at the end of the film, in the midst of the movie ' s second funeral, i found myself thinking, \" now, what does any of this have to do with that hit - and - run? \" the filmmakers may think the answer obvious, but i think the movie was plotted and executed flabbilt|##y\t|/|\n",
        "|[CLS] i ' m a huge fan of both emily watson ( breaking the waves ) and tom wilkinson ( normal ) and was amused to see them upstaged by rupert everett ( dellamorte dellamore ) in this shockingly rather minor movie that had all the ingredients to be so much more. the too brief scenes in which he portrays a languid, infinitely entitled, worthless son of a rich lord are spot - on and entertaining. but for a love triangle there was remarkably little chemistry to speak of between anyone. the music was annoyingly movie - of - the - week quality, and the voice - over jarring and totally unnecessary. clearly the work of a first - time director with a small budget who either lacked or didn ' t sufficiently heed good advice. too bad. < br / > < br / > i can appreciate how the people you kind of hate at the beginning are the ones you kind of like at the end, and vice - versa, so there is some sort of character arc, at least in terms of perception. for example, watson ' s character, while refreshingly honest to her husband about her feelings for another man, began to grate on me near the end, particularly when she announced to her husband that she simply had absolutely no control over her actions, and later when she simply declared that she would be moving back into their marital flat, with no asking of permission, no apologies offered. and i went from disliking wilkinson ' s control freak / moral relativist character to sort of understanding him and not really wanting him to change ( unlike his wife ). < br / > < br / > this movie awkwardly morphed from a whodunit to a \" love story \" or \" steel magnolias \" illness drama without sufficiently informing me of the fact, so i was left distractedly guessing what the next plot twist might be long after they had all been revealed ( was it the lord driving the car? the lord\t|'|.|\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "['.', '/']"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "list(set(df['Predicted Token'].tolist()))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "학습 결과를 보면 .과 / 으로만 내뱉고 있는 걸 알 수 있다.\n",
        "그래서 그냥 저 두개 중에 찍어서 맞으면 정답이라고 하는 정도인 것 같음\n",
        "\n",
        "* 여러번 학습 해봤는데 특수문자만 나오는건 아니고 her .. 등등이 타겟이 될 때도 있음 (데이터 따라)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'/': 51, '.': 50, 'it': 42, 'film': 26, '!': 25, 'one': 25, 'movie': 20, '*': 20, 'the': 17, '\"': 15, 'of': 15, '10': 14, 'this': 11, 'bad': 10, ')': 10, 'all': 10, 'time': 9, '##s': 9, ',': 9, '-': 8, 'you': 8, 'me': 7, 'to': 7, 'a': 7, 'that': 7, 's': 6, ':': 6, \"'\": 6, 'do': 5, 'did': 5, 'not': 5, 'funny': 5, '2': 5, '<': 5, 'off': 5, 'again': 5, 'well': 5, 'ever': 5, '>': 5, 'disappointing': 5, 'i': 5, '?': 5, 'long': 4, 'and': 4, 'warned': 4, 'more': 4, 'else': 4, 'life': 4, 'trash': 4, 'here': 4, 'good': 4, 'avoid': 4, 'seen': 4, 'show': 3, 'hours': 3, 'yourself': 3, '##er': 3, 'instead': 3, 'plot': 3, 'cinema': 3, '##d': 3, 'costs': 3, 'her': 3, 'down': 3, 'made': 3, 'sorry': 3, 'movies': 3, 'for': 3, '##ity': 3, 'in': 3, 'rubbish': 3, 'story': 3, 'is': 3, 'only': 3, 'thing': 3, 'kids': 3, 'at': 3, 'cast': 3, 'back': 3, 'money': 3, 'entertaining': 3, 'work': 2, 'way': 2, 'four': 2, 'sucked': 2, 'happened': 2, 'easy': 2, 'scripts': 2, 'first': 2, 'looking': 2, 'fans': 2, 'alone': 2, 'actors': 2, 'films': 2, 'too': 2, 'boys': 2, 'from': 2, 'cable': 2, 'care': 2, 'end': 2, 'screen': 2, '##k': 2, 'man': 2, 'them': 2, 'sucks': 2, 'think': 2, 'garbage': 2, 'example': 2, 'talent': 2, 'pathetic': 2, 'painful': 2, 'who': 2, 'what': 2, 'language': 2, 'as': 2, 'possible': 2, 'list': 2, 'br': 2, 'we': 2, 'fantastic': 2, 'their': 2, 'role': 2, 'away': 2, 'lame': 2, 'understand': 2, 'up': 2, 'miss': 2, 'be': 2, 'credibility': 2, 'no': 2, 'ugly': 2, 'america': 2, 'so': 2, 'generous': 2, 'were': 2, 'junk': 2, 'there': 2, '##nia': 2, '##ful': 2, 'around': 2, 'anyone': 2, 'like': 2, 'century': 2, '##ble': 2, 'was': 2, 'someone': 2, 'mind': 2, 'much': 2, 'moment': 2, '1': 2, 'out': 2, 'plague': 2, 'f': 2, 'ten': 2, 'disappointed': 2, 'tim': 2, 'next': 2, '##t': 2, 'boring': 2, '##ja': 1, '##vable': 1, 'stuff': 1, 'together': 1, 'cents': 1, 'category': 1, 'framed': 1, 'turtle': 1, 'horror': 1, 'makers': 1, '##qual': 1, 'd': 1, 'content': 1, 'titles': 1, 'replay': 1, 'fashion': 1, 'break': 1, '##c': 1, 'played': 1, 'home': 1, 'sl': 1, 'attention': 1, 'christmas': 1, 'europe': 1, 'window': 1, 'shakes': 1, '##sy': 1, 'industry': 1, '##ness': 1, 'gun': 1, 'some': 1, 'compassion': 1, 'tell': 1, 'audience': 1, '##fied': 1, 'sometimes': 1, 'difficult': 1, '##lake': 1, 'waste': 1, 'hide': 1, 'deserves': 1, 'chase': 1, '##ammed': 1, 'soul': 1, 'then': 1, '##watch': 1, 'king': 1, 'suspended': 1, 'experience': 1, 'imp': 1, 'minutes': 1, 'beforehand': 1, 'print': 1, 'mc': 1, 'et': 1, 'unbelievable': 1, 'suck': 1, '##imated': 1, 'deeply': 1, 'score': 1, 'mark': 1, 'cash': 1, 'anyway': 1, 'showtime': 1, '##ed': 1, 'old': 1, 'mercy': 1, 'chuckle': 1, 'close': 1, 'york': 1, 'comedy': 1, 'imperialism': 1, '##an': 1, 'space': 1, 'once': 1, 'didn': 1, '##hey': 1, 'disgust': 1, 'bollywood': 1, 'classes': 1, 'cassidy': 1, 'birth': 1, 'dolls': 1, 'predictable': 1, 'dvd': 1, 'bach': 1, 'most': 1, 'sense': 1, 'ending': 1, 'cruel': 1, 'anymore': 1, '##e': 1, ';': 1, 'website': 1, 'ideas': 1, 'dude': 1, 'woman': 1, 'scene': 1, '##p': 1, 'guys': 1, 'den': 1, 'hand': 1, 'music': 1, 'push': 1, 'bernstein': 1, 'lower': 1, 'colombo': 1, 'fan': 1, 'decision': 1, 're': 1, 'jack': 1, 'v': 1, 'etc': 1, 'wars': 1, 'killer': 1, 'doomed': 1, 'brand': 1, 'impressed': 1, 'advertised': 1, 'being': 1, 'gang': 1, '##gate': 1, 'situation': 1, 'historical': 1, 'wood': 1, 'bunch': 1, 'mistake': 1, '##ept': 1, 'fall': 1, 'nanny': 1, 'scare': 1, '##ler': 1, 'file': 1, 'reward': 1, 'taste': 1, '##ing': 1, 'creek': 1, 'reason': 1, 'family': 1, 'second': 1, 'gives': 1, 'australia': 1, 'nothing': 1, 'lost': 1, 'irs': 1, '##um': 1, 'science': 1, 'marion': 1, 'now': 1, 'dull': 1, 'face': 1, 'ago': 1, 'beautiful': 1, '2002': 1, 'distraction': 1, 'school': 1, 'bodies': 1, 'shown': 1, 'morning': 1, 'john': 1, 'if': 1, 'kramer': 1, 'worst': 1, 'years': 1, 'changes': 1, 'target': 1, 'france': 1, 'natural': 1, 'soft': 1, 'wise': 1, '##ours': 1, '##r': 1, '##rich': 1, 'overboard': 1, 'altogether': 1, '##crow': 1, 'amateur': 1, 'enough': 1, '1968': 1, 'inventory': 1, 'promising': 1, 'planet': 1, 'making': 1, 'original': 1, '##als': 1, 'watching': 1, 'price': 1, '##rio': 1, 'bother': 1, 'entertainment': 1, 'somewhere': 1, 'impact': 1, 'wonderful': 1, 'parts': 1, 'edison': 1, 'grind': 1, 'spectator': 1, '##pool': 1, 'his': 1, 'saw': 1, '##rity': 1, 'recommended': 1, 'lynch': 1, 'saga': 1, 'rest': 1, 'hardly': 1, 'crisis': 1, 'mer': 1, '##ome': 1, '8': 1, 'bel': 1, 'right': 1, 'about': 1, 'attractive': 1, 'musical': 1, 'usually': 1, 'primitive': 1, 'quite': 1, '##ial': 1, '##ge': 1, 'sets': 1, 'worked': 1, '##tch': 1, 'college': 1, 'headache': 1, 'appreciation': 1, 'tree': 1, 'sing': 1, 'poetic': 1, 'roll': 1, 't': 1, '##hn': 1, 'book': 1, 'exchange': 1, '##ishly': 1, 'satisfaction': 1, 'bore': 1, 'recommend': 1, 'characters': 1, 'picture': 1, 'pull': 1, 'realize': 1, 'act': 1, 'deal': 1, 'she': 1, 'performances': 1, 'magnitude': 1, 'production': 1, 'americans': 1, 'absurd': 1, 'early': 1, '##ort': 1, '##nk': 1, 'crap': 1, 'stopped': 1, '##ear': 1, 'personally': 1, 'rich': 1, 'unnecessary': 1, 'line': 1, 'year': 1, 'consumers': 1, 'by': 1, 'alive': 1, '##ling': 1, 'stereotypes': 1, 'sites': 1, 'question': 1, 'go': 1, 'quality': 1, 'seems': 1, 'deserved': 1, 'hurry': 1, 'please': 1, 'scenario': 1, 'box': 1, 'feast': 1, 'levels': 1, 'laugh': 1, 'particular': 1, 'nature': 1, 'nice': 1, 'awful': 1, 'name': 1, 'blah': 1, 'illness': 1, 'people': 1, 'big': 1, 'very': 1, 'dogs': 1, '4': 1, 'know': 1, 'manage': 1, '##ism': 1, 'sir': 1, 'series': 1, 'patrick': 1, 'actress': 1, 'version': 1, 'favorable': 1, 'mess': 1, 'with': 1, 'highlights': 1, 'bethany': 1, 'never': 1, 'comment': 1, 'ich': 1, 'works': 1, 'take': 1, 'night': 1, 'times': 1, 'inclusion': 1, 'sane': 1, 'tv': 1, 'nobody': 1, 'unicorn': 1, 'hercules': 1, '3': 1, '6': 1, 'won': 1, 'trilogy': 1, 'opinion': 1, 'note': 1, '##y': 1, 'play': 1, 'traditions': 1, '##ya': 1, 'exceptional': 1, 'middle': 1, 'coats': 1, 'crows': 1, 'anything': 1, 'giggle': 1, 'flick': 1, 'performance': 1, 'passed': 1, '##bain': 1, 'sequel': 1, 'effort': 1, 'person': 1, 'blows': 1, 'motivated': 1, '##ess': 1, 'shower': 1, '##ille': 1, 'great': 1, 'rental': 1, 'cared': 1, 'worse': 1, 'inspiration': 1, 'paces': 1, 'symbolism': 1, 'world': 1, 'forever': 1, '##que': 1, '##ded': 1, '##off': 1, 'disney': 1, '##ab': 1, 'palmer': 1, 'disappointment': 1, 'viewers': 1, 'soon': 1, 'cool': 1, '##ang': 1, 'psychology': 1, 'less': 1, 'lines': 1, 'coding': 1, 'loser': 1, 'on': 1, 'are': 1, 'found': 1, 'briefly': 1, '##bly': 1, 'curious': 1, 'legs': 1, 'destroyed': 1, '##ming': 1, 'turkey': 1, 'hurt': 1, 'an': 1, 'brother': 1, '##hed': 1, 'library': 1, 'spoil': 1, 'bed': 1, 'career': 1, 'ye': 1, '##dd': 1, 'dreams': 1, '##ot': 1, 'shell': 1, 'bit': 1, '##ia': 1, '##or': 1, 'hated': 1, 'culture': 1, 'cream': 1, 'favor': 1, '##on': 1, 'ones': 1, 'jewish': 1, 'credit': 1, '##kes': 1, 'air': 1, 'wife': 1, '##ll': 1, 'throne': 1, 'sure': 1, 'cameron': 1, '##ised': 1, 'vision': 1, 'mail': 1, 'double': 1, 'him': 1, 'rollins': 1, 'savannah': 1, 'robert': 1, '##lk': 1, 'teacher': 1, 'sloppy': 1, 'better': 1, 'self': 1, 'overly': 1, 'bop': 1, 'script': 1, 'has': 1, 'okay': 1, 'barrel': 1, 'chose': 1, 'scary': 1, 'dwarf': 1, '##ly': 1, 'marc': 1, 'when': 1, 'mortals': 1, 'see': 1, 'watch': 1, 'zero': 1, 'direction': 1, 'lot': 1, 'moments': 1, 'environment': 1, '##db': 1, 'fun': 1})\n"
          ]
        }
      ],
      "source": [
        "from collections import Counter\n",
        "\n",
        "label_counter = Counter()\n",
        "\n",
        "for batch in train_loader:\n",
        "    _, labels = batch\n",
        "    label_tokens = tokenizer.convert_ids_to_tokens(labels.view(-1).tolist())\n",
        "    label_counter.update(label_tokens)\n",
        "\n",
        "print(label_counter)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "역시 . / 가 데이터 중 label 에 제일 많은 걸 알 수 있다."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### model 2\n",
        "\n",
        "1. 더 많은 데이터 사용 : 5%가 아니라 10% 데이터 사용\n",
        "2. 데이터 전처리 : 특수문자 제거\n",
        "3. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2500\n"
          ]
        }
      ],
      "source": [
        "train_ds_2 = load_dataset(\"stanfordnlp/imdb\", split=\"train[:10%]\")\n",
        "test_ds_2 = load_dataset(\"stanfordnlp/imdb\", split=\"test[:10%]\")\n",
        "\n",
        "print(len(test_ds_2))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'text': 'I rented I AM CURIOUS-YELLOW from my video store because of all the controversy that surrounded it when it was first released in 1967. I also heard that at first it was seized by U.S. customs if it ever tried to enter this country, therefore being a fan of films considered \"controversial\" I really had to see this for myself.<br /><br />The plot is centered around a young Swedish drama student named Lena who wants to learn everything she can about life. In particular she wants to focus her attentions to making some sort of documentary on what the average Swede thought about certain political issues such as the Vietnam War and race issues in the United States. In between asking politicians and ordinary denizens of Stockholm about their opinions on politics, she has sex with her drama teacher, classmates, and married men.<br /><br />What kills me about I AM CURIOUS-YELLOW is that 40 years ago, this was considered pornographic. Really, the sex and nudity scenes are few and far between, even then it\\'s not shot like some cheaply made porno. While my countrymen mind find it shocking, in reality sex and nudity are a major staple in Swedish cinema. Even Ingmar Bergman, arguably their answer to good old boy John Ford, had sex scenes in his films.<br /><br />I do commend the filmmakers for the fact that any sex shown in the film is shown for artistic purposes rather than just to shock people and make money to be shown in pornographic theaters in America. I AM CURIOUS-YELLOW is a good film for anyone wanting to study the meat and potatoes (no pun intended) of Swedish cinema. But really, this film doesn\\'t have much of a plot.',\n",
              " 'label': 0}"
            ]
          },
          "execution_count": 33,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_ds_2[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 데이터 전처리\n",
        "clean_text 함수를 통해 아래와 같은 전처리를 진행해본다.\n",
        "* 소문자 변환\n",
        "* <\\br> 태그 제거\n",
        "* 알파벳 공백 제외 제거\n",
        "* 중복 공백 제거"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "12d952912fc247218ee1b8b8a5382a70",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Map:   0%|          | 0/2500 [00:00<?, ? examples/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "7d3e3d710b784400a2da662fb41a2224",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "Map:   0%|          | 0/2500 [00:00<?, ? examples/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import re\n",
        "\n",
        "def clean_text(example):\n",
        "    example['text'] = example['text'].lower()\n",
        "    example['text'] = re.sub(r\"<br\\s*/?>\", \" \", example[\"text\"])\n",
        "    example['text'] = re.sub(r\"[^a-z\\s]\", \" \", example[\"text\"])\n",
        "    example['text'] = re.sub(r\"\\s+\", \" \", example[\"text\"]).strip()\n",
        "    return example\n",
        "\n",
        "train_ds_2 = train_ds_2.map(clean_text)\n",
        "test_ds_2 = test_ds_2.map(clean_text)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'text': 'i rented i am curious yellow from my video store because of all the controversy that surrounded it when it was first released in i also heard that at first it was seized by u s customs if it ever tried to enter this country therefore being a fan of films considered controversial i really had to see this for myself the plot is centered around a young swedish drama student named lena who wants to learn everything she can about life in particular she wants to focus her attentions to making some sort of documentary on what the average swede thought about certain political issues such as the vietnam war and race issues in the united states in between asking politicians and ordinary denizens of stockholm about their opinions on politics she has sex with her drama teacher classmates and married men what kills me about i am curious yellow is that years ago this was considered pornographic really the sex and nudity scenes are few and far between even then it s not shot like some cheaply made porno while my countrymen mind find it shocking in reality sex and nudity are a major staple in swedish cinema even ingmar bergman arguably their answer to good old boy john ford had sex scenes in his films i do commend the filmmakers for the fact that any sex shown in the film is shown for artistic purposes rather than just to shock people and make money to be shown in pornographic theaters in america i am curious yellow is a good film for anyone wanting to study the meat and potatoes no pun intended of swedish cinema but really this film doesn t have much of a plot',\n",
              " 'label': 0}"
            ]
          },
          "execution_count": 58,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "train_ds_2[0]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {},
      "outputs": [],
      "source": [
        "train_loader_2 = DataLoader(\n",
        "    train_ds_2, batch_size=64, shuffle=True, collate_fn=collate_fn\n",
        ")\n",
        "test_loader_2 = DataLoader(\n",
        "    test_ds_2, batch_size=64, shuffle=False, collate_fn=collate_fn\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {},
      "outputs": [],
      "source": [
        "class LastWordPredictor2(nn.Module):\n",
        "  def __init__(self, vocab_size, d_model, n_layers, dff):\n",
        "    super().__init__()\n",
        "\n",
        "    self.vocab_size = vocab_size\n",
        "    self.d_model = d_model\n",
        "    self.n_layers = n_layers\n",
        "    self.dff = dff\n",
        "\n",
        "    self.embedding = nn.Embedding(vocab_size, d_model) # d_model의 차원의 벡터로 embedding\n",
        "    self.pos_encoding = nn.parameter.Parameter(positional_encoding(max_len, d_model), requires_grad=False)\n",
        "    self.layers = nn.ModuleList([TransformerLayer(d_model, d_model, dff) for _ in range(n_layers)]) # n_layer만큼 transformerLayer를 쌓음\n",
        "    self.classification = nn.Linear(d_model, vocab_size)\n",
        "\n",
        "  def forward(self, x):\n",
        "    #패딩 토큰을 찾아서 mask 생성\n",
        "    mask = (x == tokenizer.pad_token_id)\n",
        "    mask = mask[:, None, :] # (B,1,S)\n",
        "\n",
        "    seq_len = x.shape[1]\n",
        "\n",
        "    x = self.embedding(x)\n",
        "    x = x * sqrt(self.d_model)\n",
        "    x = x + self.pos_encoding[:, :seq_len]\n",
        "\n",
        "    for layer in self.layers:\n",
        "      x = layer(x, mask)\n",
        "\n",
        "    x = x[:, -1]\n",
        "    x = self.classification(x)\n",
        "\n",
        "    return x\n",
        "\n",
        "\n",
        "model2 = LastWordPredictor2(len(tokenizer), 32, 2, 32)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {},
      "outputs": [],
      "source": [
        "def model_train_2(model, n_epochs):\n",
        "    train_acc_list = []\n",
        "    test_acc_list = []\n",
        "    train_losses = []\n",
        "\n",
        "    for epoch in range(n_epochs):\n",
        "        total_loss = 0.\n",
        "        model.train()\n",
        "        for data in train_loader_2:\n",
        "            model.zero_grad()\n",
        "            inputs, labels = data\n",
        "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "            preds = model(inputs)\n",
        "            loss = loss_fn(preds, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            total_loss += loss.item()\n",
        "\n",
        "        train_losses.append(total_loss)\n",
        "        print(f\"Epoch {epoch:3d} | Train Loss: {total_loss}\")\n",
        "\n",
        "        with torch.no_grad():\n",
        "            model.eval()\n",
        "            train_acc = accuracy(model, train_loader_2)\n",
        "            test_acc = accuracy(model, test_loader_2)\n",
        "            train_acc_list.append(train_acc)\n",
        "            test_acc_list.append(test_acc)\n",
        "            print(f\"=========> Train acc: {train_acc:.3f} | Test acc: {test_acc:.3f}\")\n",
        "    return train_losses, train_acc_list, test_acc_list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 388.4913101196289\n",
            "=========> Train acc: 0.048 | Test acc: 0.040\n",
            "Epoch   1 | Train Loss: 277.0259585380554\n",
            "=========> Train acc: 0.049 | Test acc: 0.060\n",
            "Epoch   2 | Train Loss: 250.96477508544922\n",
            "=========> Train acc: 0.048 | Test acc: 0.039\n",
            "Epoch   3 | Train Loss: 244.38047695159912\n",
            "=========> Train acc: 0.049 | Test acc: 0.060\n",
            "Epoch   4 | Train Loss: 242.3260154724121\n",
            "=========> Train acc: 0.048 | Test acc: 0.040\n"
          ]
        }
      ],
      "source": [
        "from torch.optim import Adam\n",
        "##hyperparam\n",
        "n_epochs = 5\n",
        "lr = 0.001\n",
        "\n",
        "model2 = model2.to('cuda')\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "\n",
        "optimizer = Adam(model2.parameters(), lr=lr)\n",
        "\n",
        "train_losses, train_acc_list, test_acc_list = model_train_2(model2, n_epochs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_metrics(train_losses, train_acc_list, test_acc_list)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saved 2500 predictions to predictions.csv\n"
          ]
        }
      ],
      "source": [
        "df2 = save_predictions_to_excel(model2, test_loader_2, tokenizer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Input Text</th>\n",
              "      <th>Target Token</th>\n",
              "      <th>Predicted Token</th>\n",
              "      <th>Correct</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[CLS] i love sci fi and am willing to put up w...</td>\n",
              "      <td>over</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[CLS] worth the entertainment value of a renta...</td>\n",
              "      <td>pass</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[CLS] its a totally average film with a few se...</td>\n",
              "      <td>directed</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[CLS] star rating saturday night friday night ...</td>\n",
              "      <td>the</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[CLS] first off let me say if you haven t enjo...</td>\n",
              "      <td>fun</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                          Input Text Target Token  \\\n",
              "0  [CLS] i love sci fi and am willing to put up w...         over   \n",
              "1  [CLS] worth the entertainment value of a renta...         pass   \n",
              "2  [CLS] its a totally average film with a few se...     directed   \n",
              "3  [CLS] star rating saturday night friday night ...          the   \n",
              "4  [CLS] first off let me say if you haven t enjo...          fun   \n",
              "\n",
              "  Predicted Token  Correct  \n",
              "0            this    False  \n",
              "1            this    False  \n",
              "2            this    False  \n",
              "3            this    False  \n",
              "4            this    False  "
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df2.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Counter({'the': 123, 'this': 120, 'of': 88, 'a': 80, 'to': 58, 'it': 45, 'for': 45, 'out': 43, 'and': 34, 'in': 33, 'is': 26, 's': 24, 'that': 22, 'movie': 19, 'all': 19, 'was': 15, 'as': 15, 'be': 14, 'your': 14, 'very': 13, 't': 13, 'more': 13, 'bad': 13, 'good': 13, 'so': 12, 'not': 12, 'at': 12, 'been': 12, 'about': 11, 'see': 11, 'just': 11, 'my': 11, 'too': 11, 'ever': 10, 'you': 9, 'i': 9, 'like': 9, '##s': 9, 'film': 8, 'than': 8, 'watch': 8, 'by': 8, 'horror': 8, 'one': 8, 'me': 8, 'on': 8, 'get': 8, 'other': 8, 'with': 7, 'time': 7, 'even': 7, 'up': 7, 'his': 7, 'never': 7, 'really': 7, 'great': 6, 'were': 6, 'every': 6, 'have': 6, 'any': 6, 'better': 6, 'from': 6, 'an': 6, 'watching': 6, 'can': 6, 'first': 6, 'being': 5, 'would': 5, 'seen': 5, 'worth': 5, 'new': 5, 'no': 5, 'but': 5, '##y': 5, 'much': 5, 'them': 5, 'big': 5, 'own': 5, 'skip': 5, 'its': 5, 'something': 5, 'recommend': 5, 'sell': 4, 'original': 4, 'avoid': 4, 'long': 4, 'family': 4, 'mer': 4, 'anything': 4, 'dr': 4, 'life': 4, 'another': 4, 'look': 4, 'real': 4, 'tv': 4, '##t': 4, 'little': 4, '##ly': 4, 'rent': 4, 'plot': 4, 'next': 4, 'oh': 4, 'beyond': 4, 'some': 4, 'interesting': 4, 'right': 4, 'does': 4, 'they': 3, 'believe': 3, 'go': 3, 'stink': 3, 'wise': 3, '##ing': 3, 'truly': 3, 'star': 3, 'rather': 3, 'only': 3, 'their': 3, 'certainly': 3, 'he': 3, 'money': 3, 'thumbs': 3, 'or': 3, 'years': 3, 'plain': 3, 'funny': 3, '##us': 3, 'boring': 3, '##r': 3, 'd': 3, 're': 3, 'way': 3, 'our': 3, 'disappointing': 3, 'extremely': 3, 'grade': 3, 'made': 3, '##table': 3, 'work': 3, 'help': 3, 'bethany': 3, 'major': 3, 'her': 3, 'video': 3, 'after': 3, 'if': 3, 'got': 3, 'do': 3, 'many': 3, '##oo': 3, 'enjoy': 3, 'book': 3, '##ic': 2, 'girl': 2, 'make': 2, 'change': 2, 'picture': 2, 'over': 2, '##man': 2, 'friend': 2, '##om': 2, 'each': 2, 'yourself': 2, 'man': 2, 'decent': 2, 'ugly': 2, 'few': 2, 'stay': 2, 'second': 2, 'running': 2, 'twist': 2, 'know': 2, 'indian': 2, '##le': 2, 'forget': 2, 'mc': 2, 'female': 2, 'horrible': 2, 'st': 2, 'these': 2, 'place': 2, 'those': 2, 'warn': 2, 'happy': 2, 'care': 2, 'lower': 2, 'then': 2, 'back': 2, 'bore': 2, 'aa': 2, 'through': 2, 'against': 2, 'quality': 2, 'acting': 2, '##e': 2, 'keep': 2, 'quite': 2, 'are': 2, 'la': 2, 'wasted': 2, 'sad': 2, '##k': 2, 'series': 2, 'totally': 2, '##gi': 2, 'humble': 2, '##o': 2, 'while': 2, 'deserve': 2, 'she': 2, '##ura': 2, 'us': 2, 'min': 2, 'miss': 2, 'will': 2, 'kill': 2, 'less': 2, 'same': 2, '##z': 2, 'movies': 2, 'love': 2, '##cre': 2, 'se': 2, 'started': 2, 'rental': 2, 'please': 2, 'hated': 2, 'm': 2, 'fat': 2, 'don': 2, 'hate': 2, 'yu': 2, 'efforts': 2, '##pr': 2, 'indeed': 2, 'minutes': 2, 'cu': 2, 'pretty': 2, 'shows': 2, 'comedy': 2, 'fun': 2, 'characters': 2, 'killing': 2, 'deserves': 2, 'thanksgiving': 2, 'fi': 2, 'regret': 2, 'ending': 2, 'come': 2, 'environmental': 2, 'saw': 2, 'killer': 2, 'awful': 2, 'had': 2, 'complete': 2, 'wide': 2, 'office': 2, 'child': 2, 'could': 2, 'wonder': 2, 'supporting': 2, 'zero': 2, 'save': 2, 'stupid': 2, 'off': 2, 'liberal': 2, 'high': 2, '##um': 2, '##n': 2, 'scene': 2, 'thank': 2, 've': 2, 'must': 2, 'scary': 2, 'kung': 1, 'either': 1, 'fly': 1, 'african': 1, 'yi': 1, 'intelligence': 1, '##pel': 1, '##pot': 1, 'subtle': 1, 'cl': 1, 'eyes': 1, '##rued': 1, 'joking': 1, 'acclaimed': 1, 'holly': 1, 'annoying': 1, '##or': 1, 'artemis': 1, 'loyal': 1, 'owl': 1, 'mean': 1, 'emmy': 1, 'usaf': 1, 'tricks': 1, '##db': 1, 'peter': 1, 'feel': 1, 'op': 1, 'temple': 1, 'disappear': 1, 'thought': 1, '##omi': 1, 'qui': 1, 'easily': 1, 'john': 1, 'american': 1, 'members': 1, '##house': 1, '##bly': 1, 'magnificent': 1, 'came': 1, 'still': 1, 'cop': 1, 'sister': 1, 'mr': 1, '##phobic': 1, 'inspiring': 1, 'human': 1, 'novel': 1, 'absolute': 1, 'wee': 1, '##est': 1, 'producing': 1, 'find': 1, 'hollywood': 1, 'dem': 1, 'such': 1, 'someone': 1, 'hopes': 1, 'profound': 1, 'cho': 1, 'killers': 1, 'gets': 1, 'song': 1, 'cinematography': 1, 'altogether': 1, 'give': 1, 'idiot': 1, 'january': 1, 'apes': 1, '##act': 1, 'stupidity': 1, 'tame': 1, '##da': 1, 'wants': 1, '##ime': 1, '##box': 1, 'tyre': 1, 'cultural': 1, 'comes': 1, 'lost': 1, 'indie': 1, 'saying': 1, 'cut': 1, 'camera': 1, 'mu': 1, 'grow': 1, 'soundtrack': 1, 'pool': 1, 'mild': 1, 'yourselves': 1, '##ater': 1, '##meric': 1, 'lot': 1, 'priest': 1, 'dod': 1, 'barn': 1, 'angela': 1, 'historically': 1, 'hr': 1, '##ham': 1, 'olsen': 1, 'emotion': 1, 'er': 1, 'morality': 1, 'political': 1, '##dr': 1, 'strongly': 1, 'hates': 1, 'russia': 1, '##q': 1, 'charlie': 1, 'likely': 1, 'tooth': 1, 'asleep': 1, 'suspects': 1, 'dreadful': 1, '##watch': 1, '##ert': 1, 'thus': 1, 'soviet': 1, 'due': 1, 'showtime': 1, 'allied': 1, '##nz': 1, '##fe': 1, 'range': 1, 'negative': 1, '##ype': 1, 'part': 1, '##ded': 1, 'trip': 1, 'jewish': 1, '##nia': 1, 'closing': 1, 'entire': 1, 'solid': 1, 'beautiful': 1, 'basement': 1, 'somewhere': 1, 'upon': 1, 'two': 1, 'quick': 1, 'grandfather': 1, 'brain': 1, '##tri': 1, 'oscar': 1, 'trust': 1, '##ev': 1, 'originally': 1, 'death': 1, 'recommendation': 1, '##ed': 1, 'buying': 1, 'turkey': 1, 'ginger': 1, 'journey': 1, 'baked': 1, 'music': 1, 'poor': 1, 'pathetic': 1, 'merry': 1, 'faster': 1, 'understand': 1, 'clearly': 1, '##dd': 1, 'slip': 1, '##ss': 1, 'read': 1, 'wallet': 1, '##ben': 1, 'youngest': 1, '##less': 1, 'ri': 1, 'guest': 1, 'history': 1, 'impressive': 1, 'paxton': 1, 'bounce': 1, 'title': 1, 'considerable': 1, '##zle': 1, 'ok': 1, 'bombs': 1, 'stain': 1, '##id': 1, 'rescue': 1, 'dire': 1, 'batman': 1, 'hung': 1, 'buff': 1, 'elizabeth': 1, 'chemist': 1, 'fa': 1, 'college': 1, '##bread': 1, 'young': 1, 'beg': 1, 'happily': 1, 'small': 1, 'version': 1, 'zodiac': 1, 'helen': 1, 'budget': 1, 'clap': 1, 'destroy': 1, 'austin': 1, 'outer': 1, '##ot': 1, 'folklore': 1, 'channel': 1, 'often': 1, 'teens': 1, 'painful': 1, 'dent': 1, 'mystery': 1, '##ole': 1, 'worries': 1, '##ler': 1, 'betsy': 1, 'garbage': 1, 'obvious': 1, 'virgin': 1, 'coaster': 1, '##fu': 1, 'already': 1, 'technical': 1, 'skipped': 1, '##bo': 1, 'char': 1, 'lo': 1, 'collectors': 1, '##sp': 1, 'grounds': 1, '##is': 1, '##ns': 1, 'tomatoes': 1, 'guerrilla': 1, 'karen': 1, 'excellent': 1, 'sort': 1, 'torch': 1, '##gun': 1, 'micro': 1, 'satisfying': 1, 'having': 1, '##nist': 1, 'officers': 1, 'translation': 1, 'went': 1, 'science': 1, 'later': 1, 'lynch': 1, '##inator': 1, 'knows': 1, 'sleeve': 1, 'timber': 1, 'has': 1, 'am': 1, 'most': 1, '##gh': 1, 'simply': 1, '##ro': 1, 'going': 1, '##ff': 1, 'making': 1, 'actually': 1, 'alright': 1, 'played': 1, 'emotional': 1, 'sweater': 1, 'leading': 1, 'minds': 1, 'pun': 1, '##scu': 1, 'distance': 1, 'frank': 1, 'unhappy': 1, 'earned': 1, 'tree': 1, 'occupation': 1, 'classic': 1, 'also': 1, '##no': 1, 'possibly': 1, 'magic': 1, 'creek': 1, 'weird': 1, 'contemporary': 1, 'fine': 1, '##ete': 1, 'says': 1, 'jean': 1, '##uis': 1, 'soon': 1, 'ul': 1, 'roth': 1, 'si': 1, 'com': 1, 'expect': 1, 'leonard': 1, 'mas': 1, 'remake': 1, 'trying': 1, 'school': 1, 'makeup': 1, 'war': 1, 'unbearable': 1, 'thing': 1, '##raine': 1, '##istic': 1, 'jason': 1, 'blonde': 1, 'corn': 1, 'enduring': 1, 'focus': 1, 'show': 1, 'score': 1, '##men': 1, 'remotely': 1, '##bing': 1, 'followed': 1, 'different': 1, 'mess': 1, 'inner': 1, 'friends': 1, 'henry': 1, '##ten': 1, 'message': 1, 'ed': 1, 'vincent': 1, '##burn': 1, '##ja': 1, 'mis': 1, 'whose': 1, 'who': 1, 'fully': 1, 'extreme': 1, 'meaningful': 1, 'tolerate': 1, 'main': 1, 'perfect': 1, '##gar': 1, 'fisted': 1, 'again': 1, 'abc': 1, 'left': 1, 'feels': 1, '##ept': 1, 'opening': 1, 'happened': 1, '##turn': 1, 'august': 1, 'thriller': 1, 'somewhat': 1, 'morgan': 1, 'style': 1, 'stealing': 1, 'acted': 1, '##ka': 1, 'patrick': 1, 'take': 1, 'total': 1, '##ich': 1, 'him': 1, 'inspiration': 1, 'fu': 1, 'frame': 1, 'terminal': 1, 'worse': 1, 'lieutenant': 1, 'wow': 1, '##py': 1, 'reason': 1, 'ticket': 1, 'commonplace': 1, 'nice': 1, 'salad': 1, 'cover': 1, 'bride': 1, 'decide': 1, 'events': 1, 'humanity': 1, 'play': 1, 'think': 1, 'matter': 1, 'goodbye': 1, 'die': 1, 'dry': 1, 'dude': 1, 'vomit': 1, 'writing': 1, 'thoroughly': 1, 'shame': 1, 'script': 1, 'highly': 1, 'enjoying': 1, '##tell': 1, 'mostly': 1, 'implied': 1, 'identifying': 1, '##hta': 1, 'reviewers': 1, 'tires': 1, 'definitely': 1, 'kelly': 1, 'together': 1, '##he': 1, 'objective': 1, 'hooper': 1, 'rain': 1, 'fairly': 1, 'stanley': 1, 'paris': 1, '##sy': 1, 'almost': 1, 'happens': 1, 'emerson': 1, 'naive': 1, 'else': 1, 'owes': 1, 'utterly': 1, 'tri': 1, 'bin': 1, 'princess': 1, 'gems': 1, 'parents': 1, 'lou': 1, 'stop': 1, 'towards': 1, 'path': 1, 'scratch': 1, '##lling': 1, 'everyone': 1, 'worthless': 1, '##och': 1, 'try': 1, 'dance': 1, 'machines': 1, '##run': 1, 'q': 1, 'whole': 1, 'adolf': 1, 'prefer': 1, '##ended': 1, 'boots': 1, '##im': 1, 'union': 1, 'early': 1, 'fisherman': 1, 'psycho': 1, 'evade': 1, 'gr': 1, 'll': 1, 'price': 1, 'nazi': 1, 'down': 1, 'absolutely': 1, '##ar': 1, 'resume': 1, '##aus': 1, '##sti': 1, 'tone': 1, 'k': 1, 'requirement': 1, 'theme': 1, '##ead': 1, 'showcased': 1, 'darkness': 1, 'prep': 1, 'thinking': 1, '##pic': 1, 'horribly': 1, 'shot': 1, 'modern': 1, 'gathering': 1, '##uven': 1, 'advice': 1, 'universe': 1, 'directing': 1, '##pid': 1, 'tight': 1, 'hitting': 1, 'filmed': 1, 'ruled': 1, 'eerie': 1, 'let': 1, 'feet': 1, 'shown': 1, 'tiny': 1, 'words': 1, 'im': 1, 'ripping': 1, 'year': 1, 'tired': 1, 'yet': 1, 'social': 1, 'childish': 1, 'anybody': 1, 'granted': 1, '##ign': 1, 'sundance': 1, 'director': 1, 'david': 1, 'evidence': 1, '##agi': 1, '##ur': 1, '##ist': 1, 'waste': 1, 'rest': 1, 'fbi': 1, 'werewolf': 1, 'store': 1, 'earth': 1, 'bring': 1, 'sloppy': 1, 'addict': 1, 'watched': 1, 'far': 1, 'imp': 1, 'minute': 1, 'around': 1, 'british': 1, 'gulf': 1, 'th': 1, 'accent': 1, 'bargain': 1, '##ness': 1, 'anna': 1, 'heading': 1, 'five': 1, 'depicting': 1, 'steward': 1, 'terribly': 1, 'sense': 1, 'petty': 1, 'check': 1, 'personality': 1, 'before': 1, '##rr': 1, 'fell': 1, 'times': 1, 'view': 1, 'feature': 1, 'sun': 1, '##cut': 1, 'rip': 1, 'naked': 1, 'existent': 1, 'bag': 1, 'caring': 1, '##a': 1, '##st': 1, '##lli': 1, 'cinderella': 1, 'warned': 1, 'sometimes': 1, '##ados': 1, '##dc': 1, '##aw': 1, 'web': 1, 'b': 1, '##aling': 1, '##inge': 1, 'nothing': 1, '##er': 1, 'richly': 1, 'old': 1, 'extra': 1, 'killed': 1, 'public': 1, 'yeah': 1, 'forgotten': 1, 'awkward': 1, 'run': 1, 'crying': 1, '##ney': 1, 'dvd': 1, '##right': 1, 'share': 1, 'mono': 1, 'bach': 1, 'cases': 1, 'capable': 1, 'clever': 1, 'everything': 1, 'bears': 1, '##able': 1, 'discover': 1, 'tex': 1, 'e': 1, 'walk': 1, 'near': 1, 'viewer': 1, 'half': 1, '##ri': 1, '##umb': 1, 'credits': 1, 'origins': 1, 'kind': 1, 'amateur': 1, 'dark': 1, 'z': 1, '##hl': 1, 'gone': 1, 'natural': 1, 'de': 1, 'agents': 1, '##all': 1, 'rated': 1, 'effective': 1, '##b': 1, 'dog': 1, 'flemish': 1, 'meg': 1, 'children': 1, 'worst': 1, 'mass': 1, 'without': 1, 'horse': 1, '##nu': 1, '##efe': 1, 'dealt': 1, 'road': 1, 'desperate': 1, 'j': 1, 'wearing': 1, 'we': 1, 'terrible': 1, 'paint': 1, 'coa': 1, '##g': 1, 'snow': 1, '##tist': 1, 'lazy': 1, 'explained': 1, 'wrong': 1, 'when': 1, 'review': 1, 'fl': 1, 'which': 1, '##ari': 1, '##zz': 1, 'hilarious': 1, 'viewpoint': 1, 'opportunities': 1, 'might': 1, 'amusing': 1, 'away': 1, 'doesn': 1, 'awaited': 1, 'silly': 1, 'trick': 1, 'mention': 1, 'account': 1, 'cat': 1, 'leads': 1, 'drawn': 1, 'sitcom': 1, 'sc': 1, 'forgive': 1, 'marion': 1, 'brother': 1, 'say': 1, '##ial': 1, '##placed': 1, 'preceded': 1, 'o': 1, 'comedian': 1, 'stuff': 1, 'pair': 1, 'adult': 1, 'low': 1, 'dwarf': 1, 'home': 1, 'under': 1, 'stage': 1, 'du': 1, 'screens': 1, 'spending': 1, 'proclaimed': 1, '##ille': 1, 'slash': 1, 'homo': 1, 'leave': 1, 'seeing': 1, 'opportunity': 1, 'release': 1, 'comment': 1, 'hope': 1, 'ripped': 1, '##era': 1, 'pay': 1, 'mad': 1, 'ah': 1})\n"
          ]
        }
      ],
      "source": [
        "from collections import Counter\n",
        "\n",
        "label_counter = Counter()\n",
        "\n",
        "for batch in train_loader_2:\n",
        "    _, labels = batch\n",
        "    label_tokens = tokenizer.convert_ids_to_tokens(labels.view(-1).tolist())\n",
        "    label_counter.update(label_tokens)\n",
        "\n",
        "print(label_counter)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "['this']\n",
            "['over' 'pass' 'directed' 'the' 'fun' 'generic' 't' 'this' 'it' 'action'\n",
            " 'little' 'then' 'to' 'house' 'very' 'lucky' 'british' 'owe' '##ik' 'a'\n",
            " 'for' 'gee' 'out' 'won' 'want' 'garbage' 'of' 'restaurant' 'film' 'burn'\n",
            " 'his' 'can' 'producer' 'all' 'set' 'enjoy' 'captain' 'pleasant' 'ending'\n",
            " 'with' 'and' 'is' 'movie' 'one' 'at' 's' 'get' 'about' '##sel' 'just'\n",
            " 'than' 'moving' '##iche' 'dark' 'isn' 'my' 'careless' 'parking' 'vane'\n",
            " 'real' 'any' 'else' 'major' 'your' 'say' 're' '##s' 'inability' 'its'\n",
            " '##db' 'wasted' 'their' 'decent' 'has' 'lines' 'grade' '##ly' 'or'\n",
            " 'others' 'killing' 'tired' 'worth' '##wn' 'through' '##se' 'got' 'no'\n",
            " 'was' 'into' 'first' '##ze' 'hour' 'me' 'mummy' 'o' 'seen' 'anything'\n",
            " 'basic' 'wash' 'i' 'as' 'great' 'if' 'mercy' 'video' 'in' 'kid' 'on'\n",
            " '##hin' 'suffer' 'book' 'some' 'began' 'quite' '##gra' 'inside' 'called'\n",
            " 'shame' 'he' 'regret' 'happy' 'so' 'best' 'see' 'better' 'red' 'l' 'use'\n",
            " 'avant' 'tracking' 'not' 'cinematography' 'explain' 'ever' 'that'\n",
            " 'blonde' 'working' 'dull' 'hmm' '##vin' 'french' 'camera' 'ran' '##tri'\n",
            " 'bag' 'even' 'stay' 'everybody' 'short' 'part' 'night' '##tish' 'cool'\n",
            " '##ting' 'from' 'z' 'don' 'next' 'd' 'perfect' 'home' 'baggage'\n",
            " 'transmitted' 'complete' 'same' 'boring' 'when' 'per' '##vating' 'such'\n",
            " 'live' 'prospective' 'by' 'drunk' 'steel' 'know' '##ou' 'hit' 'cause'\n",
            " 'frankie' 'whole' 'screenplay' 'more' '##hui' 'michel' 'really' '##ned'\n",
            " 'life' 'there' 'prime' 'do' 'plain' 'coal' 'most' 'shining' 'flick'\n",
            " 'terrible' 'right' 'think' 'unite' '##ook' 'thrill' 'total' 'go' 'qui'\n",
            " 'annoying' '##omi' '##watch' 'drama' 'released' 'cheese' 'assisted'\n",
            " 'female' 'liked' 'getting' '##er' 'acknowledge' 'claus' 'college'\n",
            " 'horrible' 'watch' 'money' 'warn' 'almost' 'george' 'bethany' 'fault'\n",
            " '##ish' 'watched' '##ing' 'prostitute' 'between' 'something' 'wish'\n",
            " 'county' 'around' '##ful' 'lovely' 'these' 'ranch' 'theatrical' 'good'\n",
            " 'own' 'stink' 'contra' 'rating' 'pace' 'you' 'plan' 'black' 'against'\n",
            " 'fi' 'take' 'recommend' 'american' '##me' 'an' 'way' 'material' 'ya'\n",
            " 'happening' 'tv' 'scrapped' 'people' 'ti' 'disgrace' 'have' 'fools'\n",
            " 'much' 'hip' 'paris' 'were' 'helpless' '##man' 'speak' 'bad' '##sas'\n",
            " 'fleeting' 'saved' 'presented' 'read' 'every' '##rus' 'fe' 'need' 'lean'\n",
            " '##ious' 'extremely' '##ef' 'guess' 'production' 'poor' 'thumbs' 'closet'\n",
            " 'lost' '##mas' 'explodes' 'situation' 'time' '##pt' 'bare' 'now' 'seeing'\n",
            " 'secondary' 'number' 'completely' 'awesome' 'hear' 'creative' 'der'\n",
            " 'fore' '##py' '##ff' '##t' 'would' 'roles' 'wind' 'temple' 'pacing'\n",
            " 'thank' '##fully' '##y' 'journey' '##io' 'ta' 'few' 'kent' 'where'\n",
            " '##pid' 'insulting' 'but' 'asian' 'be' 'let' 'later' '##rant' 'watching'\n",
            " '##rut' 'look' 'pity' 'uneven' 'award' 'move' 'her' 'done' 'after'\n",
            " 'trick' 'sequel' 'low' 'back' '##gles' 'gap' 'lab' 'help' 'name' 'emma'\n",
            " 'like' 'ph' 'jackson' 'quality' 'bbc' 've' 'austen' '##iating' 'failing'\n",
            " '##rri' 'odd' 'favorable' 'padded' 'regular' 'et' 'pilot' 'never' 'm'\n",
            " 'tempest' 'simply' 'him' 'mil' 'wood' '##ost' 'b' 'pitch' 'severe' 'too'\n",
            " 'been' 'supporting' 'act' 'sky' 'complex' 'tight' 'marriage' 'flat'\n",
            " '##oc' 'condemned' 'ass' 'accepted' 'grew' 'shiny' 'save' 'berry'\n",
            " 'intriguing' 'still' 'old' 'days' 'romantic' 'lot' 'bring' 'weekly'\n",
            " 'them' 'calling' 'officially' 'ge' 'seem' 'predictable' 'she' 'another'\n",
            " 'bits' '##pp' 'puck' 'preference' 'story' 'actually' 'j' 'they' 'mock'\n",
            " '##nta' 'films' 'jokes' 'canberra' 'ali' 'mer' 'years' 'other' 'movies'\n",
            " 'come' 'will' 'alarm' 'doing' 'line' 'stand' 'worst' 'what' 'awful'\n",
            " 'ticket' 'continuity' '##al' 'mon' 'dat' 'running' '##gence' 'standard'\n",
            " 'shirt' '##st' 'explosions' 'em' 'rocket' 'highly' 'death' '##ers'\n",
            " '##bil' 'becomes' 'top' '##rated' 'why' 'bit' 'noticed' 'give' 'world'\n",
            " 'matter' 'covered' 'ryan' 'ended' 'cooked' 'brown' 'deserved' 'podcast'\n",
            " 'fu' 'surprisingly' '##lative' 'forget' 'science' 'cannot' 'primary'\n",
            " '##ita' '##p' 'col' 'sadly' 'punish' 'main' '##not' 'absolutely' 'larry'\n",
            " 'stereo' 'might' 'narrative' 'joe' 'sonny' 'jerk' 'utterly' '##ecure'\n",
            " 'dog' 'original' '##oon' 'ho' 'vacation' '##less' 'entire' 'gear' 'had'\n",
            " 'wonder' 'brazil' 'tu' 'enough' 'positive' 'geoffrey' 'rings'\n",
            " 'disconnected' 'things' 'rough' 'boo' 'celebrated' 'job' 'are' 'far'\n",
            " 'violently' 'grades' 'self' 'begin' 'funny' 'backwards' '##d' '##bit'\n",
            " 'physical' 'toy' '##aling' 'freak' 'husband' 'badly' '##di' 'buy' '##cha'\n",
            " 'track' 'cl' 'golf' 'basically' '##or' 'man' 'anyone' 'cinema' 'imp'\n",
            " 'making' 'jealous' 'educate' 'our' 'sign' 'saying' 'nothing' 'ja' 'dr'\n",
            " 'deep' 'rest' 'co' 'size' 'eagle' 'thinking' 'iron' 'midway' 'till'\n",
            " 'massive' 'truly' 'league' 'finer' 'wonders' 'enthusiastic' '##ifying'\n",
            " 'show' 'overall' 'available' 'generally' 'accurate' 'chilled' 'plastic'\n",
            " 'amy' 'nazi' 'horror' 'head' 'try' '##och' 'down' 'shock' 'insight'\n",
            " 'many' 'date' 'blow' 'suffered' '##lch' 'thirty' 'opinion' '##if'\n",
            " '##ized' 'happen' 'diet' 'writer' '##ous' 'leach' 'entertained' 'clear'\n",
            " 'director' 'evil' 'profitable' 'eng' 'jungle' 'cary' 'ou' '##lco'\n",
            " '##able' 'pe' 'xx' 'screaming' 'annoyed' 'current' '##nable' 'smith'\n",
            " 'straight' 'paint' '##rat' 'everything' 'missing' '##ved' '##ava'\n",
            " 'nuclear' 'here' 'please' '##can' 'camp' 'big' 'german' 'candy'\n",
            " 'dimensional' '##ie' 'round' 'written' 'novelty' 'alcohol' 'miss' 'up'\n",
            " 'hideous' 'hope' 'passing' 'grande' '##out' '##llet' 'comment' 'less'\n",
            " '##land' 'sexual' 'woody' 'beyond' 'kaye' 'possible' 'crumbling'\n",
            " 'interesting' 'central' 'flu' 'secret' '##dity' 'baked' 'write' 'clean'\n",
            " 'utter' 'mean' 'pretty' 'sand' 'laugh' 'erotic' '##dos' 'zero' 'gag' 'k'\n",
            " 'huge' 'budget' 'cave' 'questions' 'kim' 'sucked' 'double' 'genre'\n",
            " 'episode' 'upon' 'prison' '##hae' '##ssi' 'addict' 'ridiculous'\n",
            " 'suffering' '##ados' 'nu' '##ow' 'wise' 'spawned' 'corn' 'helped' 'skip'\n",
            " 'committed' 'high' 'ye' '##tly' 'commercial' '##ree' 'keep' 'peterson'\n",
            " 'pun' 'four' 'remotely' 'en' '##ishly' 'humble' 'fiction' 'beautiful'\n",
            " 'love' 'cold' 'embarrassment' 'fan' 'wanna' '##u' 'basement' '##ek' 'age'\n",
            " 'designer' 'ing' 'th' '##ye' 'choice' 'c' 'barry' 'kn' 'ronald' 'bay'\n",
            " 'weak' 'delight' 'general' 'absolute' 'well' 'arm' 'stars' 'least'\n",
            " 'bigger' 'ground' 'girl' 'sol' 'dramatic' 'rent' 'mental' 'chan' 'jaw'\n",
            " 'gave' '##is' 'shallow' 'didn' 'cu' 'close' 'dvd' 'new' '##tie'\n",
            " 'attempts' 'spaghetti' 'mona' 'brothers' 'dead' 'oh' 'punt' 'plot' 'did'\n",
            " '##ani' 'rental' 'laurence' '##aves' '##lb' 'rick' 'week' 'work'\n",
            " 'detailed' 'made' '##e' 'chris' 'mal' 'different' '##cial' 'hoop'\n",
            " '##ional' 'project' 'anti' 'averaging' 'al' 'stock' 'visually'\n",
            " 'invisible' '##tive' 'worthless' '##tro' 'roll' 'reason' 'dumb' 'child'\n",
            " 'before' 'usual' 'sit' 'trip' 'view' 'impressed' 'caucasian' 'spitting'\n",
            " 'uncle' 'tears' 'destroy' 'miniature' 'drug' 'character' 'believe'\n",
            " 'needs' '##ub' 'r' 'times' 'therefore' 'second' 'painful' 'year' '##oma'\n",
            " 'beer' 'dollar' 'recorded' 'desired' '##bu' 'scene' 'cordoba' 'family'\n",
            " 'scientist' 'entertaining' 'obvious' 'snake' 'seriously' 'f' '##jar' 'll'\n",
            " '##az' 'careful' 'western' '##ets' '##om' 'intended' 'su' 'someone'\n",
            " 'being' 'ha' 'suit' 'dan' 'avoid' 'fire' 'none' 'ii' '##ming' 'oscar'\n",
            " 'gown' 'explained' 'otherwise' 'anne' 'sub' 'art' 'wonderful' 'managed'\n",
            " 'modern' 'theater' '##ter' 'heavy' 'oz' 'emphasize' 'star' 'michael'\n",
            " 'conceived' 'keystone' 'strange' 'paying' 'tape' 'enjoyed' 'vincent'\n",
            " 'scott' 'building' 'spot' 'remain' 'yeah' '##cre' 'war' 'im' '##ia' 'u'\n",
            " 'homo' 'style' 'clung' '##ma' 'school' 'make' 'eye' '##gil' 'million'\n",
            " 'resist' '##lo' 'am' 'land' 'present' 'leaves' 'laughing' '##ng'\n",
            " 'boyfriend' 'sure' 'con' 'june' 'fairly' 'series' 'buying' 'sad' 'jimmy'\n",
            " '##x' 'stays' 'intentions' 'ko' '##iful' 'ok' 'last' 'dispose' 'rain'\n",
            " 'trash' 'going' 'earned' 'missed' 'came' 'lesbian' 'genius' 'radio'\n",
            " 'does' 'harp' 'newscast' 'opera' 'title' 'ri' 'headache' 'mtv' 'punjabi'\n",
            " '##ac' 'seconds' '##ron' '##right' 'image' 'berger' 'mickey' 'token'\n",
            " '##le' '##itte' 'myself' 'living' 'romance' 'manhattan']\n"
          ]
        }
      ],
      "source": [
        "print(df2['Predicted Token'].unique())\n",
        "print(df2['Target Token'].unique())\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 🚩 model2 결과\n",
        "데이터를 늘려보고 전처리를 해줬지만 크게 acc가 늘어나는 모습은 보이지 않음. 한계인건지 궁금\n",
        "\n",
        "🔺 전처리는 생각해보니 오히려 acc가 낮아지는 원인인 것 같다. (특수문자는 대충 때려맞추면 되는데 단어가 더 어려움)\n",
        "🔺 근데 그것도 아닌 것 같기도.. 그냥 제일 많은 1~2개로 도배하는 것 같다\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "데이터가 부족하면 아래처럼 augmentation 해줄 수 있는데 data의 문제라기 보다는 적합하지 않은 모델인 것 같다.\n",
        "+ 애매한 데이터와 애매한 task"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def augment_sentence(example, max_len=400):\n",
        "    text = example['text']\n",
        "    label = example['label']\n",
        "\n",
        "    input_ids = tokenizer.encode(text, truncation=True, max_length=max_len)\n",
        "\n",
        "    samples = []\n",
        "    for i in range(4, len(input_ids)):\n",
        "        partial_ids = input_ids[:i+1]\n",
        "        decoded_text = tokenizer.decode(partial_ids, skip_special_tokens=True)\n",
        "        samples.append((decoded_text, label))\n",
        "\n",
        "    return samples\n",
        "\n",
        "augmented_data = []\n",
        "for example in tqdm(train_ds, desc=\"Augmenting\"):\n",
        "    augmented_data.extend(augment_sentence(example))\n",
        "\n",
        "print(\"총 샘플 수:\", len(augmented_data))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {},
      "outputs": [],
      "source": [
        "from torch.utils.data import Dataset\n",
        "\n",
        "class AugmentedIMDBDataset(Dataset):\n",
        "    def __init__(self, data):\n",
        "        self.data = data\n",
        "\n",
        "    def __len__(self):\n",
        "        return len(self.data)\n",
        "\n",
        "    def __getitem__(self, idx):\n",
        "        input_ids, label = self.data[idx]\n",
        "        return {\"text\": input_ids, \"label\": label}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {},
      "outputs": [],
      "source": [
        "augmented_dataset = AugmentedIMDBDataset(augmented_data)\n",
        "\n",
        "train_loader_3 = DataLoader(\n",
        "    augmented_dataset, batch_size=64, shuffle=True, collate_fn=collate_fn_2\n",
        ")"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python (nvenv)",
      "language": "python",
      "name": "nyenv"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
