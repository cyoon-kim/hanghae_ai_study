{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ymxatB5WYxlL"
      },
      "source": [
        "# 📌[2주차/심화] Multi-head Attention으로 감정 분석 모델 구현하기\n",
        "\n",
        "이번 과제에서는 Transformer encoder의 완전한 형태를 구현합니다.\n",
        "Self-attention을 multi-head attention으로 확장하고 layer normalization, dropout, residual connection 등의 technique을 적용하여 감정 분석 성능을 확인해봅니다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1X7RM2du1zcr",
        "outputId": "342bc2b6-398d-4b60-f41f-1ec2a4d86b46"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: datasets in ./nyenv/lib/python3.12/site-packages (3.5.0)\n",
            "Requirement already satisfied: sacremoses in ./nyenv/lib/python3.12/site-packages (0.1.1)\n",
            "Requirement already satisfied: filelock in ./nyenv/lib/python3.12/site-packages (from datasets) (3.18.0)\n",
            "Requirement already satisfied: numpy>=1.17 in ./nyenv/lib/python3.12/site-packages (from datasets) (2.2.4)\n",
            "Requirement already satisfied: pyarrow>=15.0.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (19.0.1)\n",
            "Requirement already satisfied: dill<0.3.9,>=0.3.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.3.8)\n",
            "Requirement already satisfied: pandas in ./nyenv/lib/python3.12/site-packages (from datasets) (2.2.3)\n",
            "Requirement already satisfied: requests>=2.32.2 in ./nyenv/lib/python3.12/site-packages (from datasets) (2.32.3)\n",
            "Requirement already satisfied: tqdm>=4.66.3 in ./nyenv/lib/python3.12/site-packages (from datasets) (4.67.1)\n",
            "Requirement already satisfied: xxhash in ./nyenv/lib/python3.12/site-packages (from datasets) (3.5.0)\n",
            "Requirement already satisfied: multiprocess<0.70.17 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.70.16)\n",
            "Requirement already satisfied: fsspec<=2024.12.0,>=2023.1.0 in ./nyenv/lib/python3.12/site-packages (from fsspec[http]<=2024.12.0,>=2023.1.0->datasets) (2024.12.0)\n",
            "Requirement already satisfied: aiohttp in ./nyenv/lib/python3.12/site-packages (from datasets) (3.11.16)\n",
            "Requirement already satisfied: huggingface-hub>=0.24.0 in ./nyenv/lib/python3.12/site-packages (from datasets) (0.30.1)\n",
            "Requirement already satisfied: packaging in ./nyenv/lib/python3.12/site-packages (from datasets) (24.2)\n",
            "Requirement already satisfied: pyyaml>=5.1 in ./nyenv/lib/python3.12/site-packages (from datasets) (6.0.2)\n",
            "Requirement already satisfied: regex in ./nyenv/lib/python3.12/site-packages (from sacremoses) (2024.11.6)\n",
            "Requirement already satisfied: click in ./nyenv/lib/python3.12/site-packages (from sacremoses) (8.1.8)\n",
            "Requirement already satisfied: joblib in ./nyenv/lib/python3.12/site-packages (from sacremoses) (1.4.2)\n",
            "Requirement already satisfied: aiohappyeyeballs>=2.3.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (2.6.1)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.3.2)\n",
            "Requirement already satisfied: attrs>=17.3.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (25.3.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.5.0)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (6.2.0)\n",
            "Requirement already satisfied: propcache>=0.2.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (0.3.1)\n",
            "Requirement already satisfied: yarl<2.0,>=1.17.0 in ./nyenv/lib/python3.12/site-packages (from aiohttp->datasets) (1.18.3)\n",
            "Requirement already satisfied: typing-extensions>=3.7.4.3 in ./nyenv/lib/python3.12/site-packages (from huggingface-hub>=0.24.0->datasets) (4.13.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in ./nyenv/lib/python3.12/site-packages (from requests>=2.32.2->datasets) (2025.1.31)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in ./nyenv/lib/python3.12/site-packages (from pandas->datasets) (2025.2)\n",
            "Requirement already satisfied: six>=1.5 in ./nyenv/lib/python3.12/site-packages (from python-dateutil>=2.8.2->pandas->datasets) (1.17.0)\n",
            "\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m A new release of pip is available: \u001b[0m\u001b[31;49m24.3.1\u001b[0m\u001b[39;49m -> \u001b[0m\u001b[32;49m25.0.1\u001b[0m\n",
            "\u001b[1m[\u001b[0m\u001b[34;49mnotice\u001b[0m\u001b[1;39;49m]\u001b[0m\u001b[39;49m To update, run: \u001b[0m\u001b[32;49mpip install --upgrade pip\u001b[0m\n"
          ]
        }
      ],
      "source": [
        "!pip install datasets sacremoses"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "foKuFNzizgPj"
      },
      "outputs": [],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "from math import sqrt\n",
        "from datasets import load_dataset\n",
        "from torch.utils.data import DataLoader\n",
        "from transformers import BertTokenizerFast\n",
        "from tokenizers import (\n",
        "    decoders,\n",
        "    models,\n",
        "    normalizers,\n",
        "    pre_tokenizers,\n",
        "    processors,\n",
        "    trainers,\n",
        "    Tokenizer,\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-_B0J6kbzC3H"
      },
      "source": [
        "### 📄 데이터 로딩\n",
        "\n",
        "IMDb (Internet Movie database)\n",
        "\n",
        "train 25000개 와 test 25000개로 이루어져 있지만 이 중 5%만 사용한다.\n",
        "\n",
        "#### 🔍 라벨\n",
        "0 : 부정적인 리뷰\n",
        "1 : 긍정적인 리뷰\n",
        "\n",
        "#### 📦 샘플\n",
        "```python\n",
        "{\n",
        "  'text': \"I watched this movie with my family and we all hated it. The story was weak...\",\n",
        "  'label': 0\n",
        "}\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "ojgWEo47yma2"
      },
      "outputs": [],
      "source": [
        "train_ds = load_dataset(\"stanfordnlp/imdb\", split=\"train[:5%]\")\n",
        "test_ds = load_dataset(\"stanfordnlp/imdb\", split=\"test[:5%]\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qi7hDLau0AlG"
      },
      "source": [
        "🔤 tokenizer 설정\n",
        "\n",
        "huggingface에서 bert-base-uncased 모델을 불러와서 설정을 한다.\n",
        "\n",
        "* 토큰화 방식\n",
        " * BERT : 단어를 서브워드 단위로 분해\n",
        " * BPE : 자주 등장하는 문자쌍을 병합\n",
        " * SentencePiece : 공백까지 포함해서 분해\n",
        "\n",
        "* 대소문자 처리\n",
        " * uncased : 모두 소문자로 치환\n",
        " * cased : 대소문자 유지\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HOdhoBVA1zcu",
        "outputId": "0f66cfad-1a85-498c-c173-da27de418d12"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Using cache found in /home/jovyan/.cache/torch/hub/huggingface_pytorch-transformers_main\n"
          ]
        }
      ],
      "source": [
        "tokenizer = torch.hub.load('huggingface/pytorch-transformers', 'tokenizer', 'bert-base-uncased')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TpHn4zAs3aF6"
      },
      "source": [
        "📦 collate_fn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "pjXRfZhc23X6"
      },
      "outputs": [],
      "source": [
        "from torch.nn.utils.rnn import pad_sequence\n",
        "\n",
        "def collate_fn(batch):\n",
        "  max_len = 400\n",
        "  texts, labels = [], []\n",
        "  for row in batch:\n",
        "    labels.append(tokenizer(row['text'], truncation=True, max_length=max_len).input_ids[-3])\n",
        "    texts.append(torch.LongTensor(tokenizer(row['text'], truncation=True, max_length=max_len).input_ids[:-3]))\n",
        "\n",
        "  texts = pad_sequence(texts, batch_first=True, padding_value=tokenizer.pad_token_id)\n",
        "  labels = torch.LongTensor(labels)\n",
        "\n",
        "  return texts, labels\n",
        "\n",
        "\n",
        "train_loader = DataLoader(\n",
        "    train_ds, batch_size=64, shuffle=True, collate_fn=collate_fn\n",
        ")\n",
        "test_loader = DataLoader(\n",
        "    test_ds, batch_size=64, shuffle=False, collate_fn=collate_fn\n",
        ")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i-FshZcTZBQ2"
      },
      "source": [
        "## ✏️  Mulhi-head Attention\n",
        "\n",
        "#### MHA 란?\n",
        "* 하나의 문장을 여러 개의 **다른 방식으로 동시에 attnetion** 해서 본다고 생각.\n",
        "* **여러개의 head**를 만들어서 각 head가 다른 시선으로 문장을 바라보게 함.\n",
        "\n",
        "Self Attention module을 MHA로 확장합니다.\n",
        "\n",
        "1. QKV는 그대로 유지\n",
        "2. QKV를 reshape D=H*D' 가 되도록\n",
        "3. transpose 해줌\n",
        "4. 기존처럼 attention 계산\n",
        "5. Mask 계산 (dimension 고려)\n",
        "6. 결과 합치기\n",
        "7. 마지막 Linear\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "5oGr0PrcV-_a"
      },
      "outputs": [],
      "source": [
        "class MultiHeadAttention(nn.Module):\n",
        "    def __init__(self, embed_dim, n_heads):\n",
        "        super().__init__()\n",
        "\n",
        "        self.embed_dim = embed_dim\n",
        "        self.n_heads = n_heads\n",
        "        self.head_dim = embed_dim // n_heads\n",
        "\n",
        "        self.wq = nn.Linear(embed_dim, embed_dim)\n",
        "        self.wk = nn.Linear(embed_dim, embed_dim)\n",
        "        self.wv = nn.Linear(embed_dim, embed_dim)\n",
        "\n",
        "        self.dense = nn.Linear(embed_dim, embed_dim)\n",
        "\n",
        "        self.softmax = nn.Softmax(dim=-1)\n",
        "\n",
        "    def forward(self, x, mask):\n",
        "        batch_size, seq_len, embed_dim = x.size()\n",
        "\n",
        "        q = self.wq(x) # (batch_size, seq_len, embed_dim)\n",
        "        k = self.wk(x)\n",
        "        v = self.wv(x)\n",
        "\n",
        "        q = q.reshape((batch_size, seq_len, self.n_heads, self.head_dim)).transpose(1,2) # (batch_size, n_heads, seq_len, embed_dim)\n",
        "        k = k.reshape((batch_size, seq_len, self.n_heads, self.head_dim)).transpose(1,2)\n",
        "        v = v.reshape((batch_size, seq_len, self.n_heads, self.head_dim)).transpose(1,2)\n",
        "\n",
        "        score = torch.matmul(q, k.transpose(-1,-2)) # (batch_size, n_heads, seq_len, seq_len)\n",
        "        score = score / sqrt(self.head_dim)\n",
        "\n",
        "        if mask is not None:\n",
        "            score = score + (mask.float() * -1e9)\n",
        "\n",
        "        score = self.softmax(score)\n",
        "        result = torch.matmul(score, v)\n",
        "\n",
        "        result = result.transpose(1,2).contiguous().view(batch_size, seq_len, embed_dim)\n",
        "\n",
        "        result = self.dense(result)\n",
        "\n",
        "        return result"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v9F2SmnljYrl"
      },
      "source": [
        "---\n",
        "### 🧱 TransformerLayer\n",
        "\n",
        "* Multi-head attention : 이미 구현해둔 class 사용\n",
        "* Feed-Forward Network (FFN) : MLP 구조 (Linear > ReLU > Linear)\n",
        "  * 각 토큰 하나하나에 대해 독립적으로 처리하는 fully connected network\n",
        "\n",
        "#### 🧠 요약\n",
        "* Attention : token간 관계 표현 개선\n",
        "* FFN : 각 토큰 자체의 표현 개선\n",
        "\n",
        "#### 🧠 개념 정리\n",
        "* residual connection (잔차 연결)\n",
        "  * layer를 깊게 쌓거나 하면 정보가 희미해지거나 학습이 어려워지니 입력을 끌어다가 뒤에서 더해주는 구조\n",
        "* dropout\n",
        "  * 이전에 배웠던 overfitting 되지 않도록 해주는 학습 기법"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "VZHPCn9AS5Gp"
      },
      "outputs": [],
      "source": [
        "class TransformerLayer(nn.Module):\n",
        "  def __init__(self, input_dim, d_model, dff, dropout_rate):\n",
        "    super().__init__()\n",
        "\n",
        "    self.input_dim = input_dim\n",
        "    self.d_model = d_model\n",
        "    self.n_heads = 4\n",
        "    \n",
        "    self.dff = dff\n",
        "\n",
        "    self.mha = MultiHeadAttention(input_dim, self.n_heads)\n",
        "    self.ffn = nn.Sequential(\n",
        "      nn.Linear(d_model, dff),\n",
        "      nn.ReLU(),\n",
        "      nn.Linear(dff, d_model)\n",
        "    )\n",
        "\n",
        "    self.norm1 = nn.LayerNorm(d_model)\n",
        "    self.dropout1 = nn.Dropout(dropout_rate)\n",
        "\n",
        "    self.norm2 = nn.LayerNorm(d_model)\n",
        "    self.dropout2 = nn.Dropout(dropout_rate)\n",
        "\n",
        "  def forward(self, x, mask):\n",
        "    x1 = self.mha(x, mask)\n",
        "    x1 = self.dropout1(x1)\n",
        "    x1 = self.norm1(x + x1)\n",
        "\n",
        "    x2 = self.ffn(x1)\n",
        "    x2 = self.dropout2(x2)\n",
        "    x2 = self.norm2(x1 + x2)\n",
        "\n",
        "    return x2"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "J3VYrqTJagS1"
      },
      "source": [
        "## 🧮 Positional encoding\n",
        "\n",
        "* 순서 정보를 인코딩해서 모델에 넣어주는 기술\n",
        "* 각 위치마다 고유한 벡터를 만들어서 입력 임베딩에 더해주는 방식\n",
        "* Transformer는 Attention 구조라서 문장을 볼때 병렬로 처리하기 때문에 RNN 처럼 순차적 처리가 되지 않음. 따라서 명시적으로 알려줘야 한다.\n",
        "\n",
        "```python\n",
        "x = token_embedding + positional_encoding\n",
        "```\n",
        "\n",
        "이번에는 positional encoding을 구현합니다. Positional encoding의 식은 다음과 같습니다:\n",
        "$$\n",
        "\\begin{align*} PE_{pos, 2i} &= \\sin\\left( \\frac{pos}{10000^{2i/D}} \\right), \\\\ PE_{pos, 2i+1} &= \\cos\\left( \\frac{pos}{10000^{2i/D}} \\right).\\end{align*}\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Uf_jMQWDUR79",
        "outputId": "2e3f0d7c-fdf8-4c78-f297-087e36a29714"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "torch.Size([1, 400, 256])\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "def get_angles(pos, i, d_model):\n",
        "    angle_rates = 1 / np.power(10000, (2 * (i // 2)) / np.float32(d_model))\n",
        "    return pos * angle_rates\n",
        "\n",
        "def positional_encoding(position, d_model):\n",
        "    angle_rads = get_angles(np.arange(position)[:, None], np.arange(d_model)[None, :], d_model)\n",
        "    angle_rads[:, 0::2] = np.sin(angle_rads[:, 0::2])\n",
        "    angle_rads[:, 1::2] = np.cos(angle_rads[:, 1::2])\n",
        "    pos_encoding = angle_rads[None, ...]\n",
        "\n",
        "    return torch.FloatTensor(pos_encoding)\n",
        "\n",
        "\n",
        "max_len = 400\n",
        "print(positional_encoding(max_len, 256).shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sSgvgIkImkBM"
      },
      "source": [
        "---\n",
        "## 🔧 LastWordPredictor (심화 과제)\n",
        "\n",
        "#### ⁉️ 변경 사항\n",
        "1. 단어 예측 task인 만큼 tokenizer의 vocab_size로 최종 출력 차원을 조정해준다.\n",
        "2. 문장의 첫번째 토큰 벡터를 뽑는 코드를 삭제하고 마지막 토큰을 뽑도록 한다 (단 패딩을 뺀 토큰)\n",
        "\n",
        "#### ⁉️ sqrt(d_model) 하는 이유\n",
        "embedding된 벡터는 작은 값인데, positional encoding은 값이 커서 positional encoding의 영향이 너무 큼 > scale up"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "8MaiCGh8TsDH"
      },
      "outputs": [],
      "source": [
        "class LastWordPredictor(nn.Module):\n",
        "  def __init__(self, vocab_size, d_model, n_layers, dff, dropout_rate):\n",
        "    super().__init__()\n",
        "\n",
        "    self.vocab_size = vocab_size\n",
        "    self.d_model = d_model\n",
        "    self.n_layers = n_layers\n",
        "    self.dff = dff\n",
        "\n",
        "    self.embedding = nn.Embedding(vocab_size, d_model) # d_model의 차원의 벡터로 embedding\n",
        "    self.pos_encoding = nn.parameter.Parameter(positional_encoding(max_len, d_model), requires_grad=False)\n",
        "    self.layers = nn.ModuleList([TransformerLayer(d_model, d_model, dff, dropout_rate) for _ in range(n_layers)]) # n_layer만큼 transformerLayer를 쌓음\n",
        "    self.classification = nn.Linear(d_model, vocab_size)\n",
        "\n",
        "  def forward(self, x):\n",
        "    #패딩 토큰을 찾아서 mask 생성\n",
        "    mask = (x == tokenizer.pad_token_id).unsqueeze(1).unsqueeze(2)\n",
        "\n",
        "    seq_len = x.shape[1]\n",
        "\n",
        "    x = self.embedding(x)\n",
        "    x = x * sqrt(self.d_model)\n",
        "    x = x + self.pos_encoding[:, :seq_len]\n",
        "\n",
        "    for layer in self.layers:\n",
        "      x = layer(x, mask)\n",
        "\n",
        "    x = x[:, -1]\n",
        "    x = self.classification(x)\n",
        "\n",
        "    return x\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {},
      "outputs": [],
      "source": [
        "vocab_size = len(tokenizer)\n",
        "embed_dim = 256\n",
        "n_layers = 5\n",
        "dff = 512\n",
        "dropout_rate=0.2\n",
        "\n",
        "model = LastWordPredictor(vocab_size, embed_dim, n_layers, dff, dropout_rate)\n",
        "model = model.to('cuda')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QDq05OlAb2lB"
      },
      "source": [
        "## 학습\n",
        "\n",
        "#### 🔧 변경사항\n",
        "* loss_fn 이 BCEWithLigitsLoss 는 이진 분류를 위한 것 이므로 변경\n",
        "* preds 구하는 법과 label을 정수형으로 변경"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "r88BALxO1zc1"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from tqdm import tqdm\n",
        "\n",
        "def accuracy(model, dataloader):\n",
        "  cnt = 0\n",
        "  acc = 0\n",
        "\n",
        "  for data in dataloader:\n",
        "    inputs, labels = data\n",
        "    inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "    preds = model(inputs)\n",
        "    preds = torch.argmax(preds, dim=-1)\n",
        "\n",
        "    cnt += labels.shape[0]\n",
        "    acc += (labels == preds).sum().item()\n",
        "\n",
        "  return acc / cnt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "al_b56TYRILq"
      },
      "outputs": [],
      "source": [
        "def model_train(model, n_epochs, train, test, optimizer):\n",
        "    train_acc_list = []\n",
        "    test_acc_list = []\n",
        "    train_losses = []\n",
        "\n",
        "    for epoch in range(n_epochs):\n",
        "        total_loss = 0.\n",
        "        model.train()\n",
        "        for data in tqdm(train, desc=f\"Epoch {epoch}\"):\n",
        "            model.zero_grad()\n",
        "            inputs, labels = data\n",
        "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "            preds = model(inputs)\n",
        "            loss = loss_fn(preds, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "\n",
        "            total_loss += loss.item()\n",
        "\n",
        "        train_losses.append(total_loss)\n",
        "        print(f\"Epoch {epoch:3d} | Train Loss: {total_loss}\")\n",
        "\n",
        "        with torch.no_grad():\n",
        "            model.eval()\n",
        "            train_acc = accuracy(model, train)\n",
        "            test_acc = accuracy(model, test)\n",
        "            train_acc_list.append(train_acc)\n",
        "            test_acc_list.append(test_acc)\n",
        "            print(f\"=========> Train acc: {train_acc:.3f} | Test acc: {test_acc:.3f}\")\n",
        "    return train_losses, train_acc_list, test_acc_list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "j_GMfB1t03ZO",
        "outputId": "2571e369-2b34-4252-f441-65919fc1fccd"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0: 100%|██████████| 20/20 [00:03<00:00,  5.86it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 128.4107689857483\n",
            "=========> Train acc: 0.070 | Test acc: 0.035\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1: 100%|██████████| 20/20 [00:03<00:00,  5.93it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   1 | Train Loss: 118.88395977020264\n",
            "=========> Train acc: 0.061 | Test acc: 0.038\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2: 100%|██████████| 20/20 [00:03<00:00,  5.84it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   2 | Train Loss: 111.7751784324646\n",
            "=========> Train acc: 0.117 | Test acc: 0.057\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3: 100%|██████████| 20/20 [00:03<00:00,  5.84it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   3 | Train Loss: 104.15045118331909\n",
            "=========> Train acc: 0.192 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 4: 100%|██████████| 20/20 [00:03<00:00,  5.88it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   4 | Train Loss: 96.8053503036499\n",
            "=========> Train acc: 0.250 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 5: 100%|██████████| 20/20 [00:03<00:00,  5.90it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   5 | Train Loss: 88.9683883190155\n",
            "=========> Train acc: 0.278 | Test acc: 0.076\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 6: 100%|██████████| 20/20 [00:03<00:00,  5.94it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   6 | Train Loss: 81.26708817481995\n",
            "=========> Train acc: 0.320 | Test acc: 0.067\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 7: 100%|██████████| 20/20 [00:03<00:00,  5.91it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   7 | Train Loss: 72.99591588973999\n",
            "=========> Train acc: 0.413 | Test acc: 0.060\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 8: 100%|██████████| 20/20 [00:03<00:00,  5.84it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   8 | Train Loss: 63.73920035362244\n",
            "=========> Train acc: 0.539 | Test acc: 0.057\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 9: 100%|██████████| 20/20 [00:03<00:00,  5.88it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   9 | Train Loss: 55.641106367111206\n",
            "=========> Train acc: 0.562 | Test acc: 0.059\n"
          ]
        }
      ],
      "source": [
        "from torch.optim import Adam\n",
        "##hyperparam\n",
        "n_epochs = 10\n",
        "lr = 0.001\n",
        "\n",
        "\n",
        "loss_fn = nn.CrossEntropyLoss()\n",
        "\n",
        "optimizer = Adam(model.parameters(), lr=lr)\n",
        "\n",
        "train_losses, train_acc_list, test_acc_list = model_train(model, n_epochs, train_loader, test_loader, optimizer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "u-I121osywgW"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_metrics(train_losses, train_accs, test_accs):\n",
        "    epochs = range(1, len(train_losses) + 1)\n",
        "\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n",
        "\n",
        "    # Loss plot\n",
        "    ax1.plot(epochs, train_losses, marker='o', linestyle='-', color='blue')\n",
        "    ax1.set_title('Training Loss')\n",
        "    ax1.set_xlabel('Epoch')\n",
        "    ax1.set_ylabel('Loss')\n",
        "    ax1.grid(True)\n",
        "\n",
        "    # Accuracy plot\n",
        "    ax2.plot(epochs, train_accs, marker='o', linestyle='-', label='Train Accuracy', color='green')\n",
        "    ax2.plot(epochs, test_accs, marker='x', linestyle='--', label='Test Accuracy', color='red')\n",
        "    ax2.set_title('Accuracy')\n",
        "    ax2.set_xlabel('Epoch')\n",
        "    ax2.set_ylabel('Accuracy')\n",
        "    ax2.legend()\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 147
        },
        "id": "rNd9va67yizb",
        "outputId": "973be804-8b52-4cd0-93a6-f008b6bee1fb"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plot_metrics(train_losses, train_acc_list, test_acc_list)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### 데이터 확인\n",
        "test 실제 output을 확인해본다"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "9qalQD1V4Ir0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saved 1250 predictions to predictions.csv\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "def save_predictions_to_excel(model, dataloader, tokenizer, filename=\"predictions.csv\"):\n",
        "    model.eval()\n",
        "    results = []\n",
        "\n",
        "    with torch.no_grad():\n",
        "        for data in dataloader:\n",
        "            inputs, labels = data\n",
        "            inputs, labels = inputs.to('cuda'), labels.to('cuda')\n",
        "\n",
        "            preds = model(inputs)\n",
        "            preds = torch.argmax(preds, dim=-1)\n",
        "\n",
        "            for i in range(inputs.size(0)):\n",
        "                input_ids = inputs[i].tolist()\n",
        "                input_tokens = tokenizer.convert_ids_to_tokens(input_ids)\n",
        "                input_text = tokenizer.convert_tokens_to_string(input_tokens)\n",
        "\n",
        "                pred_id = preds[i].item()\n",
        "                label_id = labels[i].item()\n",
        "\n",
        "                pred_token = tokenizer.convert_ids_to_tokens([pred_id])[0]\n",
        "                label_token = tokenizer.convert_ids_to_tokens([label_id])[0]\n",
        "                correct = pred_id == label_id\n",
        "\n",
        "                results.append({\n",
        "                    \"Input Text\": input_text,\n",
        "                    \"Target Token\": label_token,\n",
        "                    \"Predicted Token\": pred_token,\n",
        "                    \"Correct\": correct\n",
        "                })\n",
        "\n",
        "    df = pd.DataFrame(results)\n",
        "    df.to_csv(filename, index=False, encoding='utf-8-sig')\n",
        "    print(f\"Saved {len(results)} predictions to {filename}\")\n",
        "\n",
        "    return df\n",
        "\n",
        "df = save_predictions_to_excel(model, train_loader, tokenizer)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Input Text</th>\n",
              "      <th>Target Token</th>\n",
              "      <th>Predicted Token</th>\n",
              "      <th>Correct</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[CLS] slow and riddled with inaccuracy. over -...</td>\n",
              "      <td>bernstein</td>\n",
              "      <td>bernstein</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[CLS] when i bought this dvd i though : \" it s...</td>\n",
              "      <td>it</td>\n",
              "      <td>one</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[CLS] i saw this at the premiere in melbourne ...</td>\n",
              "      <td>life</td>\n",
              "      <td>life</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[CLS] as a great admirer of marlene dietrich, ...</td>\n",
              "      <td>##ded</td>\n",
              "      <td>##ded</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[CLS] 1st watched 8 / 3 / 2003 - 2 out of 10 (...</td>\n",
              "      <td>feast</td>\n",
              "      <td>this</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                          Input Text Target Token  \\\n",
              "0  [CLS] slow and riddled with inaccuracy. over -...    bernstein   \n",
              "1  [CLS] when i bought this dvd i though : \" it s...           it   \n",
              "2  [CLS] i saw this at the premiere in melbourne ...         life   \n",
              "3  [CLS] as a great admirer of marlene dietrich, ...        ##ded   \n",
              "4  [CLS] 1st watched 8 / 3 / 2003 - 2 out of 10 (...        feast   \n",
              "\n",
              "  Predicted Token  Correct  \n",
              "0       bernstein     True  \n",
              "1             one    False  \n",
              "2            life     True  \n",
              "3           ##ded     True  \n",
              "4            this    False  "
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saved 1250 predictions to predictions.csv\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Input Text</th>\n",
              "      <th>Target Token</th>\n",
              "      <th>Predicted Token</th>\n",
              "      <th>Correct</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>[CLS] i love sci - fi and am willing to put up...</td>\n",
              "      <td>again</td>\n",
              "      <td>movie</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[CLS] worth the entertainment value of a renta...</td>\n",
              "      <td>4</td>\n",
              "      <td>/</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>[CLS] its a totally average film with a few se...</td>\n",
              "      <td>directed</td>\n",
              "      <td>it</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>[CLS] star rating : * * * * * saturday night *...</td>\n",
              "      <td>,</td>\n",
              "      <td>,</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>[CLS] first off let me say, if you haven ' t e...</td>\n",
              "      <td>stuff</td>\n",
              "      <td>)</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1245</th>\n",
              "      <td>[CLS] very disappointing and incoherent - ever...</td>\n",
              "      <td>about</td>\n",
              "      <td>.</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1246</th>\n",
              "      <td>[CLS] please re - watch all 3 series and do no...</td>\n",
              "      <td>is</td>\n",
              "      <td>one</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1247</th>\n",
              "      <td>[CLS] i just don ' t get these reviews! i can ...</td>\n",
              "      <td>reviews</td>\n",
              "      <td>-</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1248</th>\n",
              "      <td>[CLS] * * * may contain spoilers * * * &lt; br / ...</td>\n",
              "      <td>.</td>\n",
              "      <td>,</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1249</th>\n",
              "      <td>[CLS] i stopped watching this film half way th...</td>\n",
              "      <td>mess</td>\n",
              "      <td>it</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1250 rows × 4 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                                             Input Text Target Token  \\\n",
              "0     [CLS] i love sci - fi and am willing to put up...        again   \n",
              "1     [CLS] worth the entertainment value of a renta...            4   \n",
              "2     [CLS] its a totally average film with a few se...     directed   \n",
              "3     [CLS] star rating : * * * * * saturday night *...            ,   \n",
              "4     [CLS] first off let me say, if you haven ' t e...        stuff   \n",
              "...                                                 ...          ...   \n",
              "1245  [CLS] very disappointing and incoherent - ever...        about   \n",
              "1246  [CLS] please re - watch all 3 series and do no...           is   \n",
              "1247  [CLS] i just don ' t get these reviews! i can ...      reviews   \n",
              "1248  [CLS] * * * may contain spoilers * * * < br / ...            .   \n",
              "1249  [CLS] i stopped watching this film half way th...         mess   \n",
              "\n",
              "     Predicted Token  Correct  \n",
              "0              movie    False  \n",
              "1                  /    False  \n",
              "2                 it    False  \n",
              "3                  ,     True  \n",
              "4                  )    False  \n",
              "...              ...      ...  \n",
              "1245               .    False  \n",
              "1246             one    False  \n",
              "1247               -    False  \n",
              "1248               ,    False  \n",
              "1249              it    False  \n",
              "\n",
              "[1250 rows x 4 columns]"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df = save_predictions_to_excel(model, test_loader, tokenizer)\n",
        "test_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['movie', '/', 'it', ',', ')', '!', '.', '10', 'i', 'pull', 'and',\n",
              "       'this', '*', '\"', 'one', 'of', 'the', 'poetic', 'films', \"'\",\n",
              "       'life', 'long', '##hn', 'a', 'film', 'who', 'early', 'didn',\n",
              "       'rest', 'mistake', '2', 'so', 'bad', 'first', 'grind', '##s',\n",
              "       'time', '-', 'all', '##an', 'she', 'were', 'won', 'seen', 'den',\n",
              "       'talent', 'sucks', 'credibility', 'you', 'being', 'usually',\n",
              "       'framed', 'disappointing', 'their', 'as', '?', 's', 'br', 'nature',\n",
              "       'wife', '<', 'with', 'culture', 'birth', 'historical', 'think',\n",
              "       'when', 'guys', 'shown', 'that', 'watch', 'compassion', 'close',\n",
              "       'entertaining', 'not', 'know', 'appreciation', 'only', '##ful',\n",
              "       'take', 'his', 'played', 'else', 'well', 'bop', 'back', 'doomed',\n",
              "       'australia', 'funny', 'has', 'found', 'comment', '##er', 'saw',\n",
              "       'to', '##t', 'what', 'very', 'garbage', 'off', 'ugly', 'some', '>',\n",
              "       'deeply', 'ten', 'here'], dtype=object)"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df['Predicted Token'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([',', '/', 'it', '*', 'a', '.', 'the', 'so', 'one', 'bad', '\"', '?',\n",
              "       'br', '<', 'film', '!', 'movie', ')', '>'], dtype=object)"
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "test_df[test_df.Correct == True]['Predicted Token'].unique()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "그래도 나름 다양하게 나오는 것을 확인할 수 있다.\n",
        "(근데 막상 정답을 맞추는건 특수문자나 간단한 게 많은 듯)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "----\n",
        "#### parameter tuning\n",
        "* batch_size\n",
        "* embed_dim\n",
        "* n_layers\n",
        "* n_epochs\n",
        "* learning_rate\n",
        "* dropout\n",
        "\n",
        "위와 같은 파라미터를 조절할 수 있는 test_model_param을 만들고 두 task를 비교할 수 있는 plot_metrics_2를 만든다\n",
        "\n",
        "과적합 이슈로 weight_decay 적용해줌"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {},
      "outputs": [],
      "source": [
        "def test_model_param(embed_dim=256, n_layers=5, dff=512, dropout_rate=0.2, batch_size=64, n_epochs=10, lr=0.001):\n",
        "    dff = embed_dim * 2\n",
        "    model = LastWordPredictor(vocab_size, embed_dim, n_layers, dff, dropout_rate)\n",
        "    model = model.to('cuda')\n",
        "\n",
        "\n",
        "    train_loader = DataLoader(\n",
        "        clean_train_ds, batch_size=batch_size, shuffle=True, collate_fn=collate_fn\n",
        "    )\n",
        "    test_loader = DataLoader(\n",
        "        clean_test_ds, batch_size=batch_size, shuffle=False, collate_fn=collate_fn\n",
        "    )\n",
        "\n",
        "    optimizer = Adam(model.parameters(), lr=lr, weight_decay=1e-5)\n",
        "\n",
        "    train_losses, train_acc_list, test_acc_list = model_train(model, n_epochs, train_loader, test_loader, optimizer)\n",
        "    return train_losses, train_acc_list, test_acc_list"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {},
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_metrics_2(train_acc1, train_acc2, test_acc1, test_acc2, label):\n",
        "    epochs = range(1, len(train_losses) + 1)\n",
        "\n",
        "    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n",
        "\n",
        "    print(train_acc2)\n",
        "    # Loss plot\n",
        "    ax1.plot(epochs, train_acc1, marker='o', linestyle='-', label=label, color='green')\n",
        "    ax1.plot(epochs, train_acc2, marker='x', linestyle='--', label='Default', color='red')\n",
        "    ax1.set_title('Train')\n",
        "    ax1.set_xlabel('Epoch')\n",
        "    ax1.set_ylabel('Accuracy')\n",
        "    ax1.legend()\n",
        "    ax1.grid(True)\n",
        "\n",
        "    # Accuracy plot\n",
        "    ax2.plot(epochs, test_acc1, marker='o', linestyle='-', label=label, color='green')\n",
        "    ax2.plot(epochs, test_acc2, marker='x', linestyle='--', label='Default', color='red')\n",
        "    ax2.set_title('Test')\n",
        "    ax2.set_xlabel('Epoch')\n",
        "    ax2.set_ylabel('Accuracy')\n",
        "    ax2.legend()\n",
        "    ax2.grid(True)\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0:   5%|▌         | 1/20 [00:00<00:02,  7.25it/s]"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0: 100%|██████████| 20/20 [00:02<00:00,  7.31it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 190.85716724395752\n",
            "=========> Train acc: 0.060 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1: 100%|██████████| 20/20 [00:02<00:00,  7.40it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   1 | Train Loss: 142.51222848892212\n",
            "=========> Train acc: 0.060 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2: 100%|██████████| 20/20 [00:02<00:00,  7.20it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   2 | Train Loss: 123.26825189590454\n",
            "=========> Train acc: 0.074 | Test acc: 0.057\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3: 100%|██████████| 20/20 [00:02<00:00,  7.03it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   3 | Train Loss: 117.93371248245239\n",
            "=========> Train acc: 0.086 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 4: 100%|██████████| 20/20 [00:02<00:00,  7.28it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   4 | Train Loss: 113.671959400177\n",
            "=========> Train acc: 0.123 | Test acc: 0.048\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 5: 100%|██████████| 20/20 [00:02<00:00,  7.28it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   5 | Train Loss: 108.89819812774658\n",
            "=========> Train acc: 0.157 | Test acc: 0.039\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 6: 100%|██████████| 20/20 [00:02<00:00,  7.23it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   6 | Train Loss: 103.66977787017822\n",
            "=========> Train acc: 0.202 | Test acc: 0.042\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 7: 100%|██████████| 20/20 [00:02<00:00,  7.13it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   7 | Train Loss: 97.93110704421997\n",
            "=========> Train acc: 0.272 | Test acc: 0.030\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 8: 100%|██████████| 20/20 [00:02<00:00,  7.27it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   8 | Train Loss: 90.00328350067139\n",
            "=========> Train acc: 0.296 | Test acc: 0.039\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 9: 100%|██████████| 20/20 [00:02<00:00,  7.26it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   9 | Train Loss: 81.68456077575684\n",
            "=========> Train acc: 0.361 | Test acc: 0.034\n",
            "[0.0696, 0.0608, 0.1168, 0.192, 0.2504, 0.2776, 0.32, 0.4128, 0.5392, 0.5616]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "a, b, c = test_model_param(embed_dim=128)\n",
        "\n",
        "plot_metrics_2(b, train_acc_list, c, test_acc_list, 'embed_dim=128')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "embed_dim 을 변경한 효과는 크진 않은 것 같음\n",
        "\n",
        "너무 과적합 되는 모습을 보임. dropout 비율을 높이고 (0.2 -> 0.3) 데이터가 작으니 n_layer도 줄여본다."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0: 100%|██████████| 20/20 [00:03<00:00,  6.16it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 181.27269840240479\n",
            "=========> Train acc: 0.060 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1: 100%|██████████| 20/20 [00:03<00:00,  6.13it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   1 | Train Loss: 130.50566148757935\n",
            "=========> Train acc: 0.060 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2: 100%|██████████| 20/20 [00:03<00:00,  6.06it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   2 | Train Loss: 123.19439744949341\n",
            "=========> Train acc: 0.060 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3: 100%|██████████| 20/20 [00:03<00:00,  6.05it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   3 | Train Loss: 120.62650108337402\n",
            "=========> Train acc: 0.070 | Test acc: 0.058\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 4: 100%|██████████| 20/20 [00:03<00:00,  5.94it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   4 | Train Loss: 117.99877166748047\n",
            "=========> Train acc: 0.082 | Test acc: 0.060\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 5: 100%|██████████| 20/20 [00:03<00:00,  6.35it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   5 | Train Loss: 113.52432584762573\n",
            "=========> Train acc: 0.127 | Test acc: 0.052\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 6: 100%|██████████| 20/20 [00:03<00:00,  6.13it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   6 | Train Loss: 110.07268762588501\n",
            "=========> Train acc: 0.165 | Test acc: 0.041\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 7: 100%|██████████| 20/20 [00:03<00:00,  6.38it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   7 | Train Loss: 105.35928344726562\n",
            "=========> Train acc: 0.181 | Test acc: 0.056\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 8: 100%|██████████| 20/20 [00:03<00:00,  6.15it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   8 | Train Loss: 101.09011554718018\n",
            "=========> Train acc: 0.203 | Test acc: 0.053\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 9: 100%|██████████| 20/20 [00:03<00:00,  6.13it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   9 | Train Loss: 94.93338823318481\n",
            "=========> Train acc: 0.226 | Test acc: 0.025\n",
            "[0.0696, 0.0608, 0.1168, 0.192, 0.2504, 0.2776, 0.32, 0.4128, 0.5392, 0.5616]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "a, b, c = test_model_param(dropout_rate=0.3)\n",
        "\n",
        "plot_metrics_2(b, train_acc_list, c, test_acc_list, 'dropout=0.3')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0:   5%|▌         | 1/20 [00:00<00:02,  8.35it/s]"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 0: 100%|██████████| 20/20 [00:02<00:00,  8.08it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   0 | Train Loss: 183.04509973526\n",
            "=========> Train acc: 0.041 | Test acc: 0.039\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 1: 100%|██████████| 20/20 [00:02<00:00,  8.26it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   1 | Train Loss: 128.44444227218628\n",
            "=========> Train acc: 0.094 | Test acc: 0.059\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 2: 100%|██████████| 20/20 [00:02<00:00,  8.26it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   2 | Train Loss: 116.39748001098633\n",
            "=========> Train acc: 0.109 | Test acc: 0.059\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 3: 100%|██████████| 20/20 [00:02<00:00,  8.11it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   3 | Train Loss: 109.62215375900269\n",
            "=========> Train acc: 0.169 | Test acc: 0.044\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 4: 100%|██████████| 20/20 [00:02<00:00,  8.28it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   4 | Train Loss: 106.28827619552612\n",
            "=========> Train acc: 0.182 | Test acc: 0.051\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 5: 100%|██████████| 20/20 [00:02<00:00,  8.16it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   5 | Train Loss: 98.52900743484497\n",
            "=========> Train acc: 0.220 | Test acc: 0.042\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 6: 100%|██████████| 20/20 [00:02<00:00,  8.19it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   6 | Train Loss: 91.93571615219116\n",
            "=========> Train acc: 0.242 | Test acc: 0.035\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 7: 100%|██████████| 20/20 [00:02<00:00,  8.30it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   7 | Train Loss: 84.8296070098877\n",
            "=========> Train acc: 0.273 | Test acc: 0.025\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 8: 100%|██████████| 20/20 [00:02<00:00,  8.33it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   8 | Train Loss: 78.72862911224365\n",
            "=========> Train acc: 0.324 | Test acc: 0.034\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "Epoch 9: 100%|██████████| 20/20 [00:02<00:00,  8.21it/s]\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch   9 | Train Loss: 70.87130331993103\n",
            "=========> Train acc: 0.439 | Test acc: 0.026\n",
            "[0.0696, 0.0608, 0.1168, 0.192, 0.2504, 0.2776, 0.32, 0.4128, 0.5392, 0.5616]\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "a, b, c = test_model_param(n_layers=2)\n",
        "\n",
        "plot_metrics_2(b, train_acc_list, c, test_acc_list, 'n_layer=2')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "🔺 dropout 증가로 train acc는 줄어들었지만 test acc는 크게 증가하지는 않았음\n",
        "\n",
        "🔺 n_layers도 ...\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python (nvenv)",
      "language": "python",
      "name": "nyenv"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
